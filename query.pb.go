// Code generated by protoc-gen-gogo.
// source: zvelo/msg/query.proto
// DO NOT EDIT!

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryPollRequest struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryPollRequest) Reset()                    { *m = QueryPollRequest{} }
func (*QueryPollRequest) ProtoMessage()               {}
func (*QueryPollRequest) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{0} }

func (m *QueryPollRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// QueryStatus
type QueryStatus struct {
	Complete bool               `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	Error    *google_rpc.Status `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// the http status code received from the server when fetching a url
	FetchCode int32 `protobuf:"varint,3,opt,name=fetch_code,json=fetchCode,proto3" json:"fetch_code,omitempty"`
	// fetching the url resulted in a redirect to this location
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *QueryStatus) Reset()                    { *m = QueryStatus{} }
func (*QueryStatus) ProtoMessage()               {}
func (*QueryStatus) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{1} }

func (m *QueryStatus) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *QueryStatus) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *QueryStatus) GetFetchCode() int32 {
	if m != nil {
		return m.FetchCode
	}
	return 0
}

func (m *QueryStatus) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

// QueryResult
type QueryResult struct {
	// Request ID for tracking requests
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Provided by user to link to responses
	TrackingId      string       `protobuf:"bytes,2,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	ResponseDataset *DataSet     `protobuf:"bytes,7,opt,name=response_dataset,json=responseDataset" json:"response_dataset,omitempty"`
	Url             string       `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	RequestDataset  []uint32     `protobuf:"varint,9,rep,packed,name=request_dataset,json=requestDataset" json:"request_dataset,omitempty"`
	QueryStatus     *QueryStatus `protobuf:"bytes,10,opt,name=query_status,json=queryStatus" json:"query_status,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{2} }

func (m *QueryResult) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *QueryResult) GetTrackingId() string {
	if m != nil {
		return m.TrackingId
	}
	return ""
}

func (m *QueryResult) GetResponseDataset() *DataSet {
	if m != nil {
		return m.ResponseDataset
	}
	return nil
}

func (m *QueryResult) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *QueryResult) GetRequestDataset() []uint32 {
	if m != nil {
		return m.RequestDataset
	}
	return nil
}

func (m *QueryResult) GetQueryStatus() *QueryStatus {
	if m != nil {
		return m.QueryStatus
	}
	return nil
}

// QueryURLRequests
type QueryURLRequests struct {
	// The URLs to categorize. Required.
	Url []string `protobuf:"bytes,1,rep,name=url" json:"url,omitempty"`
	// The callback url will receive the final result and may receive partial
	// results if partial_results is true. It is an error to specify
	// callback when poll is true.
	Callback string `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`
	// The client will poll for a result. It is an error to specify poll as
	// true when callback has a value.
	Poll bool `protobuf:"varint,4,opt,name=poll,proto3" json:"poll,omitempty"`
	// True if partial results should be sent to the callback endpoint in
	// addition to the final result. Only makes sense in the context of a
	// callback query.
	PartialResults bool `protobuf:"varint,5,opt,name=partial_results,json=partialResults,proto3" json:"partial_results,omitempty"`
	// The datasets to query for each URL
	Dataset []uint32 `protobuf:"varint,7,rep,packed,name=dataset" json:"dataset,omitempty"`
}

func (m *QueryURLRequests) Reset()                    { *m = QueryURLRequests{} }
func (*QueryURLRequests) ProtoMessage()               {}
func (*QueryURLRequests) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{3} }

func (m *QueryURLRequests) GetUrl() []string {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *QueryURLRequests) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *QueryURLRequests) GetPoll() bool {
	if m != nil {
		return m.Poll
	}
	return false
}

func (m *QueryURLRequests) GetPartialResults() bool {
	if m != nil {
		return m.PartialResults
	}
	return false
}

func (m *QueryURLRequests) GetDataset() []uint32 {
	if m != nil {
		return m.Dataset
	}
	return nil
}

// QueryContentRequests
type QueryContentRequests struct {
	// The content to categorize
	Content []*QueryContentRequests_URLContent `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
	// A callback URL. Will receive the final result and may receive partial
	// results if `partial-results` is true. It is an error to specify
	// callback when poll is true.
	Callback string `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`
	// Whether the client will poll for a result. It is an error to specify
	// poll as true when callback has a value.
	Poll bool `protobuf:"varint,4,opt,name=poll,proto3" json:"poll,omitempty"`
	// True if partial results should be sent to the callback endpoint in
	// addition to the final result. Only makes sense in the context of a
	// callback query.
	PartialResults bool `protobuf:"varint,5,opt,name=partial_results,json=partialResults,proto3" json:"partial_results,omitempty"`
	// The datasets to query
	Dataset []uint32 `protobuf:"varint,7,rep,packed,name=dataset" json:"dataset,omitempty"`
}

func (m *QueryContentRequests) Reset()                    { *m = QueryContentRequests{} }
func (*QueryContentRequests) ProtoMessage()               {}
func (*QueryContentRequests) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{4} }

func (m *QueryContentRequests) GetContent() []*QueryContentRequests_URLContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *QueryContentRequests) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *QueryContentRequests) GetPoll() bool {
	if m != nil {
		return m.Poll
	}
	return false
}

func (m *QueryContentRequests) GetPartialResults() bool {
	if m != nil {
		return m.PartialResults
	}
	return false
}

func (m *QueryContentRequests) GetDataset() []uint32 {
	if m != nil {
		return m.Dataset
	}
	return nil
}

// URLContent
type QueryContentRequests_URLContent struct {
	// customer supplied identifier to link to response
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// url the content came from, not required
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// headers
	//
	// header key/value pairs
	Header map[string]string `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the actual content to process. required
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *QueryContentRequests_URLContent) Reset()      { *m = QueryContentRequests_URLContent{} }
func (*QueryContentRequests_URLContent) ProtoMessage() {}
func (*QueryContentRequests_URLContent) Descriptor() ([]byte, []int) {
	return fileDescriptorQuery, []int{4, 0}
}

func (m *QueryContentRequests_URLContent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryContentRequests_URLContent) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *QueryContentRequests_URLContent) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *QueryContentRequests_URLContent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// QueryReply
type QueryReply struct {
	// will identify the request after submission
	RequestId   string       `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	QueryStatus *QueryStatus `protobuf:"bytes,3,opt,name=query_status,json=queryStatus" json:"query_status,omitempty"`
}

func (m *QueryReply) Reset()                    { *m = QueryReply{} }
func (*QueryReply) ProtoMessage()               {}
func (*QueryReply) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{5} }

func (m *QueryReply) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *QueryReply) GetQueryStatus() *QueryStatus {
	if m != nil {
		return m.QueryStatus
	}
	return nil
}

// QueryReplies
type QueryReplies struct {
	Replies []*QueryReply `protobuf:"bytes,1,rep,name=replies" json:"replies,omitempty"`
}

func (m *QueryReplies) Reset()                    { *m = QueryReplies{} }
func (*QueryReplies) ProtoMessage()               {}
func (*QueryReplies) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{6} }

func (m *QueryReplies) GetReplies() []*QueryReply {
	if m != nil {
		return m.Replies
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPollRequest)(nil), "zvelo.msg.QueryPollRequest")
	proto.RegisterType((*QueryStatus)(nil), "zvelo.msg.QueryStatus")
	proto.RegisterType((*QueryResult)(nil), "zvelo.msg.QueryResult")
	proto.RegisterType((*QueryURLRequests)(nil), "zvelo.msg.QueryURLRequests")
	proto.RegisterType((*QueryContentRequests)(nil), "zvelo.msg.QueryContentRequests")
	proto.RegisterType((*QueryContentRequests_URLContent)(nil), "zvelo.msg.QueryContentRequests.URLContent")
	proto.RegisterType((*QueryReply)(nil), "zvelo.msg.QueryReply")
	proto.RegisterType((*QueryReplies)(nil), "zvelo.msg.QueryReplies")
}
func (this *QueryPollRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryPollRequest)
	if !ok {
		that2, ok := that.(QueryPollRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryPollRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryPollRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryPollRequest but is not nil && this == nil")
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	return nil
}
func (this *QueryPollRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryPollRequest)
	if !ok {
		that2, ok := that.(QueryPollRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *QueryURLRequests) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryURLRequests)
	if !ok {
		that2, ok := that.(QueryURLRequests)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryURLRequests")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryURLRequests but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryURLRequests but is not nil && this == nil")
	}
	if len(this.Url) != len(that1.Url) {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", len(this.Url), len(that1.Url))
	}
	for i := range this.Url {
		if this.Url[i] != that1.Url[i] {
			return fmt.Errorf("Url this[%v](%v) Not Equal that[%v](%v)", i, this.Url[i], i, that1.Url[i])
		}
	}
	if this.Callback != that1.Callback {
		return fmt.Errorf("Callback this(%v) Not Equal that(%v)", this.Callback, that1.Callback)
	}
	if this.Poll != that1.Poll {
		return fmt.Errorf("Poll this(%v) Not Equal that(%v)", this.Poll, that1.Poll)
	}
	if this.PartialResults != that1.PartialResults {
		return fmt.Errorf("PartialResults this(%v) Not Equal that(%v)", this.PartialResults, that1.PartialResults)
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return fmt.Errorf("Dataset this(%v) Not Equal that(%v)", len(this.Dataset), len(that1.Dataset))
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return fmt.Errorf("Dataset this[%v](%v) Not Equal that[%v](%v)", i, this.Dataset[i], i, that1.Dataset[i])
		}
	}
	return nil
}
func (this *QueryURLRequests) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryURLRequests)
	if !ok {
		that2, ok := that.(QueryURLRequests)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Url) != len(that1.Url) {
		return false
	}
	for i := range this.Url {
		if this.Url[i] != that1.Url[i] {
			return false
		}
	}
	if this.Callback != that1.Callback {
		return false
	}
	if this.Poll != that1.Poll {
		return false
	}
	if this.PartialResults != that1.PartialResults {
		return false
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return false
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return false
		}
	}
	return true
}
func (this *QueryContentRequests) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryContentRequests)
	if !ok {
		that2, ok := that.(QueryContentRequests)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryContentRequests")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryContentRequests but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryContentRequests but is not nil && this == nil")
	}
	if len(this.Content) != len(that1.Content) {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", len(this.Content), len(that1.Content))
	}
	for i := range this.Content {
		if !this.Content[i].Equal(that1.Content[i]) {
			return fmt.Errorf("Content this[%v](%v) Not Equal that[%v](%v)", i, this.Content[i], i, that1.Content[i])
		}
	}
	if this.Callback != that1.Callback {
		return fmt.Errorf("Callback this(%v) Not Equal that(%v)", this.Callback, that1.Callback)
	}
	if this.Poll != that1.Poll {
		return fmt.Errorf("Poll this(%v) Not Equal that(%v)", this.Poll, that1.Poll)
	}
	if this.PartialResults != that1.PartialResults {
		return fmt.Errorf("PartialResults this(%v) Not Equal that(%v)", this.PartialResults, that1.PartialResults)
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return fmt.Errorf("Dataset this(%v) Not Equal that(%v)", len(this.Dataset), len(that1.Dataset))
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return fmt.Errorf("Dataset this[%v](%v) Not Equal that[%v](%v)", i, this.Dataset[i], i, that1.Dataset[i])
		}
	}
	return nil
}
func (this *QueryContentRequests) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryContentRequests)
	if !ok {
		that2, ok := that.(QueryContentRequests)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Content) != len(that1.Content) {
		return false
	}
	for i := range this.Content {
		if !this.Content[i].Equal(that1.Content[i]) {
			return false
		}
	}
	if this.Callback != that1.Callback {
		return false
	}
	if this.Poll != that1.Poll {
		return false
	}
	if this.PartialResults != that1.PartialResults {
		return false
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return false
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return false
		}
	}
	return true
}
func (this *QueryContentRequests_URLContent) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryContentRequests_URLContent)
	if !ok {
		that2, ok := that.(QueryContentRequests_URLContent)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryContentRequests_URLContent")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryContentRequests_URLContent but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryContentRequests_URLContent but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if len(this.Header) != len(that1.Header) {
		return fmt.Errorf("Header this(%v) Not Equal that(%v)", len(this.Header), len(that1.Header))
	}
	for i := range this.Header {
		if this.Header[i] != that1.Header[i] {
			return fmt.Errorf("Header this[%v](%v) Not Equal that[%v](%v)", i, this.Header[i], i, that1.Header[i])
		}
	}
	if this.Content != that1.Content {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	return nil
}
func (this *QueryContentRequests_URLContent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryContentRequests_URLContent)
	if !ok {
		that2, ok := that.(QueryContentRequests_URLContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if len(this.Header) != len(that1.Header) {
		return false
	}
	for i := range this.Header {
		if this.Header[i] != that1.Header[i] {
			return false
		}
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *QueryPollRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.QueryPollRequest{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msg.QueryStatus{")
	s = append(s, "Complete: "+fmt.Sprintf("%#v", this.Complete)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "FetchCode: "+fmt.Sprintf("%#v", this.FetchCode)+",\n")
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&msg.QueryResult{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "TrackingId: "+fmt.Sprintf("%#v", this.TrackingId)+",\n")
	if this.ResponseDataset != nil {
		s = append(s, "ResponseDataset: "+fmt.Sprintf("%#v", this.ResponseDataset)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "RequestDataset: "+fmt.Sprintf("%#v", this.RequestDataset)+",\n")
	if this.QueryStatus != nil {
		s = append(s, "QueryStatus: "+fmt.Sprintf("%#v", this.QueryStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryURLRequests) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&msg.QueryURLRequests{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Callback: "+fmt.Sprintf("%#v", this.Callback)+",\n")
	s = append(s, "Poll: "+fmt.Sprintf("%#v", this.Poll)+",\n")
	s = append(s, "PartialResults: "+fmt.Sprintf("%#v", this.PartialResults)+",\n")
	s = append(s, "Dataset: "+fmt.Sprintf("%#v", this.Dataset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryContentRequests) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&msg.QueryContentRequests{")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "Callback: "+fmt.Sprintf("%#v", this.Callback)+",\n")
	s = append(s, "Poll: "+fmt.Sprintf("%#v", this.Poll)+",\n")
	s = append(s, "PartialResults: "+fmt.Sprintf("%#v", this.PartialResults)+",\n")
	s = append(s, "Dataset: "+fmt.Sprintf("%#v", this.Dataset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryContentRequests_URLContent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msg.QueryContentRequests_URLContent{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%#v: %#v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	if this.Header != nil {
		s = append(s, "Header: "+mapStringForHeader+",\n")
	}
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.QueryReply{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.QueryStatus != nil {
		s = append(s, "QueryStatus: "+fmt.Sprintf("%#v", this.QueryStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryReplies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.QueryReplies{")
	if this.Replies != nil {
		s = append(s, "Replies: "+fmt.Sprintf("%#v", this.Replies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQuery(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueryPollRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPollRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	return i, nil
}

func (m *QueryURLRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryURLRequests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		for _, s := range m.Url {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Callback) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Callback)))
		i += copy(dAtA[i:], m.Callback)
	}
	if m.Poll {
		dAtA[i] = 0x20
		i++
		if m.Poll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PartialResults {
		dAtA[i] = 0x28
		i++
		if m.PartialResults {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Dataset) > 0 {
		dAtA2 := make([]byte, len(m.Dataset)*10)
		var j1 int
		for _, num := range m.Dataset {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *QueryContentRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContentRequests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		for _, msg := range m.Content {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Callback) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Callback)))
		i += copy(dAtA[i:], m.Callback)
	}
	if m.Poll {
		dAtA[i] = 0x20
		i++
		if m.Poll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PartialResults {
		dAtA[i] = 0x28
		i++
		if m.PartialResults {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Dataset) > 0 {
		dAtA4 := make([]byte, len(m.Dataset)*10)
		var j3 int
		for _, num := range m.Dataset {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *QueryContentRequests_URLContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContentRequests_URLContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Header) > 0 {
		for k, _ := range m.Header {
			dAtA[i] = 0x1a
			i++
			v := m.Header[k]
			mapSize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			i = encodeVarintQuery(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuery(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func encodeFixed64Query(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Query(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QueryPollRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryURLRequests) Size() (n int) {
	var l int
	_ = l
	if len(m.Url) > 0 {
		for _, s := range m.Url {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Callback)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Poll {
		n += 2
	}
	if m.PartialResults {
		n += 2
	}
	if len(m.Dataset) > 0 {
		l = 0
		for _, e := range m.Dataset {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryContentRequests) Size() (n int) {
	var l int
	_ = l
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Callback)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Poll {
		n += 2
	}
	if m.PartialResults {
		n += 2
	}
	if len(m.Dataset) > 0 {
		l = 0
		for _, e := range m.Dataset {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryContentRequests_URLContent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueryPollRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryPollRequest{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryStatus{`,
		`Complete:` + fmt.Sprintf("%v", this.Complete) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "google_rpc.Status", 1) + `,`,
		`FetchCode:` + fmt.Sprintf("%v", this.FetchCode) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResult{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`TrackingId:` + fmt.Sprintf("%v", this.TrackingId) + `,`,
		`ResponseDataset:` + strings.Replace(fmt.Sprintf("%v", this.ResponseDataset), "DataSet", "DataSet", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`RequestDataset:` + fmt.Sprintf("%v", this.RequestDataset) + `,`,
		`QueryStatus:` + strings.Replace(fmt.Sprintf("%v", this.QueryStatus), "QueryStatus", "QueryStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryURLRequests) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryURLRequests{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Callback:` + fmt.Sprintf("%v", this.Callback) + `,`,
		`Poll:` + fmt.Sprintf("%v", this.Poll) + `,`,
		`PartialResults:` + fmt.Sprintf("%v", this.PartialResults) + `,`,
		`Dataset:` + fmt.Sprintf("%v", this.Dataset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryContentRequests) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryContentRequests{`,
		`Content:` + strings.Replace(fmt.Sprintf("%v", this.Content), "QueryContentRequests_URLContent", "QueryContentRequests_URLContent", 1) + `,`,
		`Callback:` + fmt.Sprintf("%v", this.Callback) + `,`,
		`Poll:` + fmt.Sprintf("%v", this.Poll) + `,`,
		`PartialResults:` + fmt.Sprintf("%v", this.PartialResults) + `,`,
		`Dataset:` + fmt.Sprintf("%v", this.Dataset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryContentRequests_URLContent) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%v: %v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	s := strings.Join([]string{`&QueryContentRequests_URLContent{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Header:` + mapStringForHeader + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryReply{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`QueryStatus:` + strings.Replace(fmt.Sprintf("%v", this.QueryStatus), "QueryStatus", "QueryStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryReplies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryReplies{`,
		`Replies:` + strings.Replace(fmt.Sprintf("%v", this.Replies), "QueryReply", "QueryReply", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQuery(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueryPollRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPollRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPollRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryURLRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryURLRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryURLRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = append(m.Url, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Poll = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialResults", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartialResults = bool(v != 0)
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dataset = append(m.Dataset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dataset = append(m.Dataset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContentRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContentRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContentRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &QueryContentRequests_URLContent{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Poll = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialResults", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartialResults = bool(v != 0)
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dataset = append(m.Dataset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dataset = append(m.Dataset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContentRequests_URLContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthQuery
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Header == nil {
				m.Header = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthQuery
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Header[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Header[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zvelo/msg/query.proto", fileDescriptorQuery) }

var fileDescriptorQuery = []byte{
	// 733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x41, 0x6b, 0xdb, 0x4a,
	0x10, 0xd6, 0x4a, 0xb2, 0x2d, 0xaf, 0xf3, 0x12, 0x21, 0x92, 0x17, 0x61, 0x78, 0xb2, 0xf1, 0xe5,
	0x99, 0x42, 0x65, 0x9a, 0x42, 0x69, 0x02, 0xed, 0xa1, 0x49, 0xa1, 0x31, 0xa1, 0xb4, 0x1b, 0x72,
	0xe9, 0xc5, 0xc8, 0xd2, 0x46, 0x11, 0x59, 0x7b, 0x95, 0xd5, 0x2a, 0xe0, 0x9e, 0x4a, 0x4f, 0x3d,
	0xe6, 0x27, 0x38, 0xb4, 0x87, 0x1e, 0xdb, 0x7f, 0xd1, 0x63, 0xa0, 0x97, 0x1e, 0x63, 0xf7, 0x92,
	0x63, 0x7e, 0x42, 0xd1, 0x6a, 0x65, 0xa7, 0x26, 0xd0, 0x42, 0x0f, 0xbd, 0xcd, 0x7c, 0x3b, 0xb3,
	0xf3, 0xcd, 0x7c, 0xb3, 0x0b, 0xd7, 0x5e, 0x9f, 0x62, 0x42, 0x3b, 0x83, 0x24, 0xec, 0x9c, 0xa4,
	0x98, 0x8d, 0xdc, 0x98, 0x51, 0x4e, 0xad, 0xaa, 0x80, 0xdd, 0x41, 0x12, 0xd6, 0xd7, 0xe7, 0x11,
	0x81, 0xc7, 0xbd, 0x04, 0xf3, 0x3c, 0xa6, 0xbe, 0x1e, 0x52, 0x1a, 0x12, 0xdc, 0x61, 0xb1, 0xdf,
	0x49, 0xb8, 0xc7, 0xd3, 0x44, 0x1e, 0xdc, 0x0d, 0x23, 0x7e, 0x94, 0xf6, 0x5d, 0x9f, 0x0e, 0x3a,
	0x21, 0x0d, 0x69, 0x47, 0xc0, 0xfd, 0xf4, 0x50, 0x78, 0xc2, 0x11, 0x56, 0x1e, 0xde, 0xba, 0x07,
	0xcd, 0x97, 0x59, 0xe9, 0x17, 0x94, 0x10, 0x84, 0x4f, 0x52, 0x9c, 0x70, 0xeb, 0x3f, 0x08, 0x59,
	0x6e, 0xf6, 0xa2, 0xc0, 0x06, 0x4d, 0xd0, 0xae, 0xa2, 0xaa, 0x44, 0x76, 0x83, 0xd6, 0x07, 0x00,
	0x6b, 0x22, 0x67, 0x5f, 0xd4, 0xb5, 0xea, 0xd0, 0xf0, 0xe9, 0x20, 0x26, 0x98, 0x63, 0x11, 0x6c,
	0xa0, 0x99, 0x6f, 0xb5, 0x61, 0x09, 0x33, 0x46, 0x99, 0xad, 0x36, 0x41, 0xbb, 0xb6, 0x61, 0xb9,
	0x39, 0x6d, 0x97, 0xc5, 0xbe, 0x9b, 0xa7, 0xa3, 0x3c, 0x20, 0x2b, 0x7a, 0x88, 0xb9, 0x7f, 0xd4,
	0xf3, 0x69, 0x80, 0x6d, 0xad, 0x09, 0xda, 0x25, 0x54, 0x15, 0xc8, 0x36, 0x0d, 0x70, 0x56, 0x84,
	0x50, 0xdf, 0xe3, 0x11, 0x1d, 0xda, 0xba, 0x60, 0x34, 0xf3, 0xb7, 0x56, 0xc7, 0xe3, 0x86, 0x72,
	0x35, 0x6e, 0x28, 0xef, 0xce, 0x1b, 0xca, 0xd9, 0x79, 0x43, 0x19, 0x9f, 0x37, 0x94, 0xd6, 0x27,
	0x55, 0xd2, 0x44, 0x38, 0x49, 0xc9, 0xaf, 0xba, 0xb2, 0x1a, 0xb0, 0xc6, 0x99, 0xe7, 0x1f, 0x47,
	0xc3, 0x30, 0x3b, 0x57, 0xc5, 0x39, 0x2c, 0xa0, 0xdd, 0xc0, 0x7a, 0x04, 0x4d, 0x86, 0x93, 0x98,
	0x0e, 0x13, 0xdc, 0x93, 0x5a, 0xd8, 0x15, 0xd9, 0xd5, 0x4c, 0x30, 0x77, 0xc7, 0xe3, 0xde, 0x3e,
	0xe6, 0x68, 0xa5, 0x88, 0xdd, 0xc9, 0x43, 0x2d, 0x13, 0x6a, 0x29, 0x23, 0xb6, 0x21, 0xee, 0xcd,
	0x4c, 0xeb, 0x7f, 0xb8, 0x52, 0x10, 0x2a, 0xee, 0xab, 0x36, 0xb5, 0xf6, 0x3f, 0x68, 0x59, 0xc2,
	0x45, 0xea, 0x26, 0x5c, 0x12, 0xeb, 0xd1, 0xcb, 0x85, 0xb6, 0xa1, 0xa8, 0xfa, 0xef, 0x8d, 0xaa,
	0x37, 0xe4, 0x40, 0xb5, 0x93, 0xb9, 0x73, 0xfb, 0x68, 0xba, 0xba, 0xa1, 0x99, 0x7a, 0x57, 0x37,
	0x74, 0xb3, 0xd4, 0xd5, 0x8d, 0x92, 0x59, 0xee, 0xea, 0x46, 0xd9, 0xac, 0xb4, 0xde, 0x03, 0xb9,
	0x0d, 0x07, 0x68, 0x4f, 0x2e, 0x43, 0x52, 0x10, 0x07, 0x4d, 0xad, 0x20, 0x9e, 0x09, 0xee, 0x11,
	0xd2, 0xf7, 0xfc, 0x63, 0x21, 0x54, 0x15, 0xcd, 0x7c, 0xcb, 0x82, 0x7a, 0x4c, 0x09, 0x11, 0x1a,
	0x19, 0x48, 0xd8, 0x59, 0xa3, 0xb1, 0xc7, 0x78, 0xe4, 0x91, 0x1e, 0x13, 0x5a, 0x24, 0x76, 0x49,
	0x1c, 0x2f, 0x4b, 0x38, 0x57, 0x28, 0xb1, 0x6c, 0x58, 0x99, 0x4f, 0x36, 0x9b, 0x44, 0xe1, 0x76,
	0x75, 0x43, 0x35, 0x35, 0xc9, 0xf2, 0xb3, 0x06, 0x57, 0x05, 0xcb, 0x6d, 0x3a, 0xe4, 0x78, 0xc8,
	0x67, 0x4c, 0x77, 0x60, 0xc5, 0xcf, 0x21, 0xc1, 0xb6, 0xb6, 0x71, 0x67, 0x71, 0x44, 0x0b, 0x19,
	0xee, 0x01, 0xda, 0x2b, 0xa0, 0x22, 0xf5, 0x2f, 0x74, 0x57, 0xff, 0x0a, 0x20, 0x9c, 0x53, 0xb1,
	0x96, 0xa1, 0x3a, 0xdb, 0x50, 0x35, 0x0a, 0x0a, 0x05, 0xd4, 0xf9, 0xea, 0x3c, 0x87, 0xe5, 0x23,
	0xec, 0x05, 0x98, 0xd9, 0x9a, 0x68, 0xf4, 0xc1, 0xef, 0x37, 0xea, 0x3e, 0x13, 0x89, 0x4f, 0x87,
	0x9c, 0x8d, 0x90, 0xbc, 0x25, 0xa3, 0x56, 0x4c, 0x2e, 0x7f, 0x5c, 0x85, 0x5b, 0xdf, 0x84, 0xb5,
	0x1b, 0x09, 0x19, 0x95, 0x63, 0x3c, 0x92, 0xdc, 0x32, 0xd3, 0x5a, 0x85, 0xa5, 0x53, 0x8f, 0xa4,
	0x58, 0xd2, 0xcb, 0x9d, 0x2d, 0xf5, 0x21, 0xf8, 0x49, 0xb3, 0xb7, 0x00, 0x42, 0xf9, 0x18, 0x63,
	0x32, 0x5a, 0x78, 0x8b, 0xea, 0xe2, 0x5b, 0x5c, 0x5c, 0x78, 0xed, 0xcf, 0x17, 0x1e, 0x98, 0x6a,
	0xeb, 0x00, 0x2e, 0xcd, 0x38, 0x44, 0x38, 0xb1, 0x3a, 0xb0, 0xc2, 0x72, 0x53, 0xee, 0xcb, 0xda,
	0x62, 0x05, 0xc1, 0x16, 0x15, 0x51, 0xb7, 0x5f, 0xfe, 0xe4, 0xf1, 0xc5, 0xc4, 0x51, 0xbe, 0x4d,
	0x1c, 0xe5, 0x72, 0xe2, 0x80, 0xeb, 0x89, 0x03, 0xde, 0x4c, 0x1d, 0xf0, 0x71, 0xea, 0x80, 0x2f,
	0x53, 0x07, 0x5c, 0x4c, 0x1d, 0x70, 0x39, 0x75, 0xc0, 0xd5, 0xd4, 0x51, 0xae, 0xa7, 0x0e, 0x38,
	0xfb, 0xee, 0x28, 0xaf, 0x96, 0xf2, 0x32, 0x91, 0xf8, 0xd8, 0xfb, 0x65, 0xf1, 0x13, 0xdf, 0xff,
	0x11, 0x00, 0x00, 0xff, 0xff, 0x22, 0xe1, 0xe1, 0x8d, 0x0e, 0x06, 0x00, 0x00,
}
