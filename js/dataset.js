/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.zvelo.msg.DataSet');
goog.provide('proto.zvelo.msg.DataSet.Categorization');
goog.provide('proto.zvelo.msg.DataSet.Echo');
goog.provide('proto.zvelo.msg.DataSet.Language');
goog.provide('proto.zvelo.msg.DataSet.Malicious');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.zvelo.msg.Status');

goog.forwardDeclare('proto.zvelo.msg.Category');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zvelo.msg.DataSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zvelo.msg.DataSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zvelo.msg.DataSet.displayName = 'proto.zvelo.msg.DataSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zvelo.msg.DataSet.prototype.toObject = function(opt_includeInstance) {
  return proto.zvelo.msg.DataSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zvelo.msg.DataSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    categorization: (f = msg.getCategorization()) && proto.zvelo.msg.DataSet.Categorization.toObject(includeInstance, f),
    malicious: (f = msg.getMalicious()) && proto.zvelo.msg.DataSet.Malicious.toObject(includeInstance, f),
    echo: (f = msg.getEcho()) && proto.zvelo.msg.DataSet.Echo.toObject(includeInstance, f),
    language: (f = msg.getLanguage()) && proto.zvelo.msg.DataSet.Language.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zvelo.msg.DataSet}
 */
proto.zvelo.msg.DataSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zvelo.msg.DataSet;
  return proto.zvelo.msg.DataSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zvelo.msg.DataSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zvelo.msg.DataSet}
 */
proto.zvelo.msg.DataSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zvelo.msg.DataSet.Categorization;
      reader.readMessage(value,proto.zvelo.msg.DataSet.Categorization.deserializeBinaryFromReader);
      msg.setCategorization(value);
      break;
    case 5:
      var value = new proto.zvelo.msg.DataSet.Malicious;
      reader.readMessage(value,proto.zvelo.msg.DataSet.Malicious.deserializeBinaryFromReader);
      msg.setMalicious(value);
      break;
    case 6:
      var value = new proto.zvelo.msg.DataSet.Echo;
      reader.readMessage(value,proto.zvelo.msg.DataSet.Echo.deserializeBinaryFromReader);
      msg.setEcho(value);
      break;
    case 8:
      var value = new proto.zvelo.msg.DataSet.Language;
      reader.readMessage(value,proto.zvelo.msg.DataSet.Language.deserializeBinaryFromReader);
      msg.setLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zvelo.msg.DataSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zvelo.msg.DataSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zvelo.msg.DataSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCategorization();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zvelo.msg.DataSet.Categorization.serializeBinaryToWriter
    );
  }
  f = message.getMalicious();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.zvelo.msg.DataSet.Malicious.serializeBinaryToWriter
    );
  }
  f = message.getEcho();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.zvelo.msg.DataSet.Echo.serializeBinaryToWriter
    );
  }
  f = message.getLanguage();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.zvelo.msg.DataSet.Language.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zvelo.msg.DataSet.Categorization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zvelo.msg.DataSet.Categorization.repeatedFields_, null);
};
goog.inherits(proto.zvelo.msg.DataSet.Categorization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zvelo.msg.DataSet.Categorization.displayName = 'proto.zvelo.msg.DataSet.Categorization';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zvelo.msg.DataSet.Categorization.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zvelo.msg.DataSet.Categorization.prototype.toObject = function(opt_includeInstance) {
  return proto.zvelo.msg.DataSet.Categorization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zvelo.msg.DataSet.Categorization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.Categorization.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: jspb.Message.getRepeatedField(msg, 3),
    error: (f = msg.getError()) && proto.zvelo.msg.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zvelo.msg.DataSet.Categorization}
 */
proto.zvelo.msg.DataSet.Categorization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zvelo.msg.DataSet.Categorization;
  return proto.zvelo.msg.DataSet.Categorization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zvelo.msg.DataSet.Categorization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zvelo.msg.DataSet.Categorization}
 */
proto.zvelo.msg.DataSet.Categorization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Array.<!proto.zvelo.msg.Category>} */ (reader.readPackedEnum());
      msg.setValueList(value);
      break;
    case 4:
      var value = new proto.zvelo.msg.Status;
      reader.readMessage(value,proto.zvelo.msg.Status.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zvelo.msg.DataSet.Categorization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zvelo.msg.DataSet.Categorization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zvelo.msg.DataSet.Categorization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.Categorization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.zvelo.msg.Status.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Category value = 3;
 * @return {!Array.<!proto.zvelo.msg.Category>}
 */
proto.zvelo.msg.DataSet.Categorization.prototype.getValueList = function() {
  return /** @type {!Array.<!proto.zvelo.msg.Category>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.zvelo.msg.Category>} value */
proto.zvelo.msg.DataSet.Categorization.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.zvelo.msg.Category} value
 * @param {number=} opt_index
 */
proto.zvelo.msg.DataSet.Categorization.prototype.addValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.zvelo.msg.DataSet.Categorization.prototype.clearValueList = function() {
  this.setValueList([]);
};


/**
 * optional Status error = 4;
 * @return {?proto.zvelo.msg.Status}
 */
proto.zvelo.msg.DataSet.Categorization.prototype.getError = function() {
  return /** @type{?proto.zvelo.msg.Status} */ (
    jspb.Message.getWrapperField(this, proto.zvelo.msg.Status, 4));
};


/** @param {?proto.zvelo.msg.Status|undefined} value */
proto.zvelo.msg.DataSet.Categorization.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.zvelo.msg.DataSet.Categorization.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zvelo.msg.DataSet.Categorization.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zvelo.msg.DataSet.Language = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zvelo.msg.DataSet.Language, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zvelo.msg.DataSet.Language.displayName = 'proto.zvelo.msg.DataSet.Language';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zvelo.msg.DataSet.Language.prototype.toObject = function(opt_includeInstance) {
  return proto.zvelo.msg.DataSet.Language.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zvelo.msg.DataSet.Language} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.Language.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.zvelo.msg.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zvelo.msg.DataSet.Language}
 */
proto.zvelo.msg.DataSet.Language.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zvelo.msg.DataSet.Language;
  return proto.zvelo.msg.DataSet.Language.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zvelo.msg.DataSet.Language} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zvelo.msg.DataSet.Language}
 */
proto.zvelo.msg.DataSet.Language.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.zvelo.msg.Status;
      reader.readMessage(value,proto.zvelo.msg.Status.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zvelo.msg.DataSet.Language.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zvelo.msg.DataSet.Language.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zvelo.msg.DataSet.Language} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.Language.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zvelo.msg.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.zvelo.msg.DataSet.Language.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zvelo.msg.DataSet.Language.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status error = 2;
 * @return {?proto.zvelo.msg.Status}
 */
proto.zvelo.msg.DataSet.Language.prototype.getError = function() {
  return /** @type{?proto.zvelo.msg.Status} */ (
    jspb.Message.getWrapperField(this, proto.zvelo.msg.Status, 2));
};


/** @param {?proto.zvelo.msg.Status|undefined} value */
proto.zvelo.msg.DataSet.Language.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zvelo.msg.DataSet.Language.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zvelo.msg.DataSet.Language.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zvelo.msg.DataSet.Malicious = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zvelo.msg.DataSet.Malicious.repeatedFields_, null);
};
goog.inherits(proto.zvelo.msg.DataSet.Malicious, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zvelo.msg.DataSet.Malicious.displayName = 'proto.zvelo.msg.DataSet.Malicious';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zvelo.msg.DataSet.Malicious.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zvelo.msg.DataSet.Malicious.prototype.toObject = function(opt_includeInstance) {
  return proto.zvelo.msg.DataSet.Malicious.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zvelo.msg.DataSet.Malicious} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.Malicious.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.zvelo.msg.Status.toObject(includeInstance, f),
    categoryList: jspb.Message.getRepeatedField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zvelo.msg.DataSet.Malicious}
 */
proto.zvelo.msg.DataSet.Malicious.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zvelo.msg.DataSet.Malicious;
  return proto.zvelo.msg.DataSet.Malicious.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zvelo.msg.DataSet.Malicious} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zvelo.msg.DataSet.Malicious}
 */
proto.zvelo.msg.DataSet.Malicious.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = new proto.zvelo.msg.Status;
      reader.readMessage(value,proto.zvelo.msg.Status.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 9:
      var value = /** @type {!Array.<!proto.zvelo.msg.Category>} */ (reader.readPackedEnum());
      msg.setCategoryList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zvelo.msg.DataSet.Malicious.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zvelo.msg.DataSet.Malicious.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zvelo.msg.DataSet.Malicious} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.Malicious.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.zvelo.msg.Status.serializeBinaryToWriter
    );
  }
  f = message.getCategoryList();
  if (f.length > 0) {
    writer.writePackedEnum(
      9,
      f
    );
  }
};


/**
 * optional Status error = 8;
 * @return {?proto.zvelo.msg.Status}
 */
proto.zvelo.msg.DataSet.Malicious.prototype.getError = function() {
  return /** @type{?proto.zvelo.msg.Status} */ (
    jspb.Message.getWrapperField(this, proto.zvelo.msg.Status, 8));
};


/** @param {?proto.zvelo.msg.Status|undefined} value */
proto.zvelo.msg.DataSet.Malicious.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.zvelo.msg.DataSet.Malicious.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zvelo.msg.DataSet.Malicious.prototype.hasError = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated Category category = 9;
 * @return {!Array.<!proto.zvelo.msg.Category>}
 */
proto.zvelo.msg.DataSet.Malicious.prototype.getCategoryList = function() {
  return /** @type {!Array.<!proto.zvelo.msg.Category>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<!proto.zvelo.msg.Category>} value */
proto.zvelo.msg.DataSet.Malicious.prototype.setCategoryList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!proto.zvelo.msg.Category} value
 * @param {number=} opt_index
 */
proto.zvelo.msg.DataSet.Malicious.prototype.addCategory = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.zvelo.msg.DataSet.Malicious.prototype.clearCategoryList = function() {
  this.setCategoryList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zvelo.msg.DataSet.Echo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zvelo.msg.DataSet.Echo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zvelo.msg.DataSet.Echo.displayName = 'proto.zvelo.msg.DataSet.Echo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zvelo.msg.DataSet.Echo.prototype.toObject = function(opt_includeInstance) {
  return proto.zvelo.msg.DataSet.Echo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zvelo.msg.DataSet.Echo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.Echo.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.zvelo.msg.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zvelo.msg.DataSet.Echo}
 */
proto.zvelo.msg.DataSet.Echo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zvelo.msg.DataSet.Echo;
  return proto.zvelo.msg.DataSet.Echo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zvelo.msg.DataSet.Echo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zvelo.msg.DataSet.Echo}
 */
proto.zvelo.msg.DataSet.Echo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = new proto.zvelo.msg.Status;
      reader.readMessage(value,proto.zvelo.msg.Status.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zvelo.msg.DataSet.Echo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zvelo.msg.DataSet.Echo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zvelo.msg.DataSet.Echo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zvelo.msg.DataSet.Echo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zvelo.msg.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.zvelo.msg.DataSet.Echo.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zvelo.msg.DataSet.Echo.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status error = 2;
 * @return {?proto.zvelo.msg.Status}
 */
proto.zvelo.msg.DataSet.Echo.prototype.getError = function() {
  return /** @type{?proto.zvelo.msg.Status} */ (
    jspb.Message.getWrapperField(this, proto.zvelo.msg.Status, 2));
};


/** @param {?proto.zvelo.msg.Status|undefined} value */
proto.zvelo.msg.DataSet.Echo.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zvelo.msg.DataSet.Echo.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zvelo.msg.DataSet.Echo.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Categorization categorization = 1;
 * @return {?proto.zvelo.msg.DataSet.Categorization}
 */
proto.zvelo.msg.DataSet.prototype.getCategorization = function() {
  return /** @type{?proto.zvelo.msg.DataSet.Categorization} */ (
    jspb.Message.getWrapperField(this, proto.zvelo.msg.DataSet.Categorization, 1));
};


/** @param {?proto.zvelo.msg.DataSet.Categorization|undefined} value */
proto.zvelo.msg.DataSet.prototype.setCategorization = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zvelo.msg.DataSet.prototype.clearCategorization = function() {
  this.setCategorization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zvelo.msg.DataSet.prototype.hasCategorization = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Malicious malicious = 5;
 * @return {?proto.zvelo.msg.DataSet.Malicious}
 */
proto.zvelo.msg.DataSet.prototype.getMalicious = function() {
  return /** @type{?proto.zvelo.msg.DataSet.Malicious} */ (
    jspb.Message.getWrapperField(this, proto.zvelo.msg.DataSet.Malicious, 5));
};


/** @param {?proto.zvelo.msg.DataSet.Malicious|undefined} value */
proto.zvelo.msg.DataSet.prototype.setMalicious = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.zvelo.msg.DataSet.prototype.clearMalicious = function() {
  this.setMalicious(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zvelo.msg.DataSet.prototype.hasMalicious = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Echo echo = 6;
 * @return {?proto.zvelo.msg.DataSet.Echo}
 */
proto.zvelo.msg.DataSet.prototype.getEcho = function() {
  return /** @type{?proto.zvelo.msg.DataSet.Echo} */ (
    jspb.Message.getWrapperField(this, proto.zvelo.msg.DataSet.Echo, 6));
};


/** @param {?proto.zvelo.msg.DataSet.Echo|undefined} value */
proto.zvelo.msg.DataSet.prototype.setEcho = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.zvelo.msg.DataSet.prototype.clearEcho = function() {
  this.setEcho(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zvelo.msg.DataSet.prototype.hasEcho = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Language language = 8;
 * @return {?proto.zvelo.msg.DataSet.Language}
 */
proto.zvelo.msg.DataSet.prototype.getLanguage = function() {
  return /** @type{?proto.zvelo.msg.DataSet.Language} */ (
    jspb.Message.getWrapperField(this, proto.zvelo.msg.DataSet.Language, 8));
};


/** @param {?proto.zvelo.msg.DataSet.Language|undefined} value */
proto.zvelo.msg.DataSet.prototype.setLanguage = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.zvelo.msg.DataSet.prototype.clearLanguage = function() {
  this.setLanguage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zvelo.msg.DataSet.prototype.hasLanguage = function() {
  return jspb.Message.getField(this, 8) != null;
};


