// Code generated by protoc-gen-go.
// source: zvelo.io/msg/status.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Status_Code int32

const (
	Status_UNKNOWN                         Status_Code = 0
	Status_OK                              Status_Code = 200
	Status_CREATED                         Status_Code = 201
	Status_ACCEPTED                        Status_Code = 202
	Status_BAD_REQUEST                     Status_Code = 400
	Status_UNAUTHORIZED                    Status_Code = 401
	Status_FORBIDDEN                       Status_Code = 403
	Status_NOT_FOUND                       Status_Code = 404
	Status_REQUEST_TIMEOUT                 Status_Code = 408
	Status_CONFLICT                        Status_Code = 409
	Status_PRECONDITION_FAILED             Status_Code = 412
	Status_REQUESTED_RANGE_NOT_SATISFIABLE Status_Code = 416
	Status_INTERNAL_SERVER_ERROR           Status_Code = 500
	Status_NOT_IMPLEMENTED                 Status_Code = 501
	Status_BAD_GATEWAY                     Status_Code = 502
	Status_SERVICE_UNAVAILABLE             Status_Code = 503
	Status_GATEWAY_TIMEOUT                 Status_Code = 504
)

var Status_Code_name = map[int32]string{
	0:   "UNKNOWN",
	200: "OK",
	201: "CREATED",
	202: "ACCEPTED",
	400: "BAD_REQUEST",
	401: "UNAUTHORIZED",
	403: "FORBIDDEN",
	404: "NOT_FOUND",
	408: "REQUEST_TIMEOUT",
	409: "CONFLICT",
	412: "PRECONDITION_FAILED",
	416: "REQUESTED_RANGE_NOT_SATISFIABLE",
	500: "INTERNAL_SERVER_ERROR",
	501: "NOT_IMPLEMENTED",
	502: "BAD_GATEWAY",
	503: "SERVICE_UNAVAILABLE",
	504: "GATEWAY_TIMEOUT",
}
var Status_Code_value = map[string]int32{
	"UNKNOWN":                         0,
	"OK":                              200,
	"CREATED":                         201,
	"ACCEPTED":                        202,
	"BAD_REQUEST":                     400,
	"UNAUTHORIZED":                    401,
	"FORBIDDEN":                       403,
	"NOT_FOUND":                       404,
	"REQUEST_TIMEOUT":                 408,
	"CONFLICT":                        409,
	"PRECONDITION_FAILED":             412,
	"REQUESTED_RANGE_NOT_SATISFIABLE": 416,
	"INTERNAL_SERVER_ERROR":           500,
	"NOT_IMPLEMENTED":                 501,
	"BAD_GATEWAY":                     502,
	"SERVICE_UNAVAILABLE":             503,
	"GATEWAY_TIMEOUT":                 504,
}

func (x Status_Code) String() string {
	return proto.EnumName(Status_Code_name, int32(x))
}
func (Status_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 0} }

type Status struct {
	Code        Status_Code `protobuf:"varint,1,opt,name=code,enum=msg.Status_Code" json:"code,omitempty"`
	Message     string      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	FetchStatus *Status     `protobuf:"bytes,3,opt,name=fetch_status,json=fetchStatus" json:"fetch_status,omitempty"`
	Location    string      `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Status) GetFetchStatus() *Status {
	if m != nil {
		return m.FetchStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*Status)(nil), "msg.Status")
	proto.RegisterEnum("msg.Status_Code", Status_Code_name, Status_Code_value)
}

var fileDescriptor6 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x52, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0x26, 0xeb, 0x55, 0xd3, 0x3a, 0x61, 0x31, 0x06, 0xa4, 0xc0, 0x05, 0x54, 0x71, 0xe0, 0x94,
	0x4a, 0xe5, 0x09, 0x9c, 0x64, 0x52, 0xac, 0x66, 0xed, 0xc5, 0x71, 0x5a, 0xd1, 0x8b, 0xb5, 0x2c,
	0xa1, 0x54, 0x6a, 0x09, 0x22, 0x81, 0x03, 0x4f, 0x01, 0x82, 0x03, 0x48, 0x1c, 0x78, 0x1c, 0xe0,
	0x05, 0x78, 0x0b, 0x4e, 0xfc, 0x1d, 0x71, 0xbc, 0xd9, 0xd5, 0x1e, 0x67, 0xe6, 0x9b, 0xef, 0x67,
	0x34, 0xf8, 0xe6, 0x9b, 0xd7, 0xf5, 0x79, 0x13, 0x9f, 0x35, 0x7b, 0x17, 0xed, 0xe9, 0x5e, 0xdb,
	0xcd, 0xbb, 0x57, 0x6d, 0xfc, 0xe2, 0x65, 0xd3, 0x35, 0x14, 0xd9, 0xce, 0xee, 0x4f, 0x84, 0xb7,
	0x4a, 0xd7, 0xa5, 0x77, 0xf1, 0x78, 0xd1, 0x3c, 0xa9, 0x23, 0xef, 0x8e, 0x77, 0x6f, 0xb2, 0x4f,
	0x62, 0x3b, 0x8e, 0x97, 0xa3, 0x38, 0xb5, 0x7d, 0xe5, 0xa6, 0x34, 0xc2, 0xfe, 0x45, 0xdd, 0xb6,
	0xf3, 0xd3, 0x3a, 0x1a, 0x59, 0xe0, 0x8e, 0x5a, 0x95, 0x34, 0xc6, 0xe1, 0xd3, 0xba, 0x5b, 0x3c,
	0x33, 0x4b, 0x95, 0x08, 0xd9, 0x71, 0xb0, 0x1f, 0x6c, 0xf0, 0xa8, 0xc0, 0x01, 0x06, 0xbd, 0x5b,
	0x78, 0xfb, 0xbc, 0x59, 0xcc, 0xbb, 0xb3, 0xe6, 0x79, 0x34, 0x76, 0x54, 0xeb, 0x7a, 0xf7, 0xc7,
	0x08, 0x8f, 0x7b, 0x51, 0x1a, 0x60, 0xbf, 0x12, 0x87, 0x42, 0x1e, 0x0b, 0x72, 0x89, 0xfa, 0x78,
	0x24, 0x0f, 0xc9, 0x57, 0x8f, 0x86, 0xd8, 0x4f, 0x15, 0x30, 0x0d, 0x19, 0xf9, 0xe6, 0xd1, 0xcb,
	0x78, 0x9b, 0xa5, 0x29, 0xcc, 0xfa, 0xf2, 0xbb, 0x47, 0x09, 0x0e, 0x12, 0x96, 0x19, 0x05, 0x0f,
	0x2b, 0x28, 0x35, 0x79, 0x8b, 0xe8, 0x55, 0x1c, 0x56, 0x82, 0x55, 0xfa, 0x81, 0x54, 0xfc, 0xc4,
	0x82, 0xde, 0x21, 0x3a, 0xc1, 0x3b, 0xb9, 0x54, 0x09, 0xcf, 0x32, 0x10, 0xe4, 0xbd, 0xab, 0x85,
	0xd4, 0x26, 0x97, 0x95, 0xc8, 0xc8, 0x07, 0x44, 0xaf, 0xe3, 0x2b, 0x03, 0x81, 0xd1, 0x7c, 0x0a,
	0xb2, 0xd2, 0xe4, 0x23, 0xea, 0x95, 0x52, 0x29, 0xf2, 0x82, 0xa7, 0x9a, 0x7c, 0x42, 0xf6, 0x16,
	0xd7, 0x66, 0x0a, 0x6c, 0x27, 0xe3, 0x9a, 0x4b, 0x61, 0x72, 0xc6, 0x0b, 0x4b, 0xff, 0x19, 0xd9,
	0x5b, 0xde, 0x1e, 0xd6, 0xc1, 0x3a, 0x61, 0xe2, 0x00, 0x4c, 0x4f, 0x5f, 0x32, 0xcd, 0xcb, 0x9c,
	0xb3, 0xa4, 0x00, 0xf2, 0x05, 0xd9, 0x0b, 0xdc, 0xe0, 0x42, 0x83, 0x12, 0xac, 0x30, 0x25, 0xa8,
	0x23, 0x50, 0x06, 0x94, 0x92, 0x8a, 0xfc, 0x72, 0x06, 0xfa, 0x0d, 0x3e, 0x9d, 0x15, 0x30, 0x05,
	0xd1, 0x67, 0xfb, 0x8d, 0x56, 0xd9, 0x0e, 0x6c, 0xf4, 0x63, 0xf6, 0x88, 0xfc, 0x71, 0x1e, 0xfa,
	0x55, 0x9e, 0x82, 0xb1, 0x19, 0x8f, 0xac, 0x03, 0xc7, 0xfe, 0xd7, 0x31, 0x0c, 0xb8, 0x75, 0x84,
	0x7f, 0x28, 0x99, 0x9c, 0x84, 0x9b, 0x2f, 0xf1, 0x78, 0xcb, 0x3d, 0xc3, 0xfd, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x4f, 0x3e, 0x75, 0x38, 0x29, 0x02, 0x00, 0x00,
}
