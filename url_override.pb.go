// Code generated by protoc-gen-gogo.
// source: zvelo/msg/url_override.proto
// DO NOT EDIT!

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// OverrideType
type OverrideType int32

const (
	UNKNOWN_OVERRIDE OverrideType = 0
	// Created by a human
	HUMAN_OVERRIDE OverrideType = 1
)

var OverrideType_name = map[int32]string{
	0: "UNKNOWN_OVERRIDE",
	1: "HUMAN_OVERRIDE",
}
var OverrideType_value = map[string]int32{
	"UNKNOWN_OVERRIDE": 0,
	"HUMAN_OVERRIDE":   1,
}

func (OverrideType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{0} }

// Override
type Override struct {
	// Base URL this override applies to
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Determines if this override applies to all subdomains and paths
	Wildcard bool `protobuf:"varint,2,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
	// URL that this override will point to
	TargetUrl string `protobuf:"bytes,3,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
	// User or service that created this override
	UserId    string       `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedAt *time.Time   `protobuf:"bytes,5,opt,name=created_at,json=createdAt,stdtime" json:"created_at,omitempty"`
	ExpiresAt *time.Time   `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,stdtime" json:"expires_at,omitempty"`
	Comment   string       `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	Type      OverrideType `protobuf:"varint,8,opt,name=type,proto3,enum=zvelo.msg.OverrideType" json:"type,omitempty"`
}

func (m *Override) Reset()                    { *m = Override{} }
func (*Override) ProtoMessage()               {}
func (*Override) Descriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{0} }

func (m *Override) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Override) GetWildcard() bool {
	if m != nil {
		return m.Wildcard
	}
	return false
}

func (m *Override) GetTargetUrl() string {
	if m != nil {
		return m.TargetUrl
	}
	return ""
}

func (m *Override) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Override) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Override) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *Override) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Override) GetType() OverrideType {
	if m != nil {
		return m.Type
	}
	return UNKNOWN_OVERRIDE
}

// Overrides
type Overrides struct {
	Items []*Override `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Overrides) Reset()                    { *m = Overrides{} }
func (*Overrides) ProtoMessage()               {}
func (*Overrides) Descriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{1} }

func (m *Overrides) GetItems() []*Override {
	if m != nil {
		return m.Items
	}
	return nil
}

// OverrideRequest
type OverrideRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *OverrideRequest) Reset()                    { *m = OverrideRequest{} }
func (*OverrideRequest) ProtoMessage()               {}
func (*OverrideRequest) Descriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{2} }

func (m *OverrideRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// OverrideListRequest
//
// You can specify both search strings to get an implicit 'OR'.
type OverrideListRequest struct {
	// List overrides that contain this string in the TargetURL field.
	TargetSearch string `protobuf:"bytes,2,opt,name=target_search,json=targetSearch,proto3" json:"target_search,omitempty"`
	// List overrides that contain this string in the base URL field.
	BaseSearch string `protobuf:"bytes,3,opt,name=base_search,json=baseSearch,proto3" json:"base_search,omitempty"`
}

func (m *OverrideListRequest) Reset()                    { *m = OverrideListRequest{} }
func (*OverrideListRequest) ProtoMessage()               {}
func (*OverrideListRequest) Descriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{3} }

func (m *OverrideListRequest) GetTargetSearch() string {
	if m != nil {
		return m.TargetSearch
	}
	return ""
}

func (m *OverrideListRequest) GetBaseSearch() string {
	if m != nil {
		return m.BaseSearch
	}
	return ""
}

// OverrideListExpiredRequest
type OverrideListExpiredRequest struct {
	Type OverrideType `protobuf:"varint,1,opt,name=type,proto3,enum=zvelo.msg.OverrideType" json:"type,omitempty"`
}

func (m *OverrideListExpiredRequest) Reset()      { *m = OverrideListExpiredRequest{} }
func (*OverrideListExpiredRequest) ProtoMessage() {}
func (*OverrideListExpiredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUrlOverride, []int{4}
}

func (m *OverrideListExpiredRequest) GetType() OverrideType {
	if m != nil {
		return m.Type
	}
	return UNKNOWN_OVERRIDE
}

func init() {
	proto.RegisterType((*Override)(nil), "zvelo.msg.Override")
	proto.RegisterType((*Overrides)(nil), "zvelo.msg.Overrides")
	proto.RegisterType((*OverrideRequest)(nil), "zvelo.msg.OverrideRequest")
	proto.RegisterType((*OverrideListRequest)(nil), "zvelo.msg.OverrideListRequest")
	proto.RegisterType((*OverrideListExpiredRequest)(nil), "zvelo.msg.OverrideListExpiredRequest")
	proto.RegisterEnum("zvelo.msg.OverrideType", OverrideType_name, OverrideType_value)
}
func (x OverrideType) String() string {
	s, ok := OverrideType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Override) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Override)
	if !ok {
		that2, ok := that.(Override)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Override")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Override but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Override but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if this.Wildcard != that1.Wildcard {
		return fmt.Errorf("Wildcard this(%v) Not Equal that(%v)", this.Wildcard, that1.Wildcard)
	}
	if this.TargetUrl != that1.TargetUrl {
		return fmt.Errorf("TargetUrl this(%v) Not Equal that(%v)", this.TargetUrl, that1.TargetUrl)
	}
	if this.UserId != that1.UserId {
		return fmt.Errorf("UserId this(%v) Not Equal that(%v)", this.UserId, that1.UserId)
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return fmt.Errorf("this.CreatedAt != nil && that1.CreatedAt == nil")
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if that1.ExpiresAt == nil {
		if this.ExpiresAt != nil {
			return fmt.Errorf("this.ExpiresAt != nil && that1.ExpiresAt == nil")
		}
	} else if !this.ExpiresAt.Equal(*that1.ExpiresAt) {
		return fmt.Errorf("ExpiresAt this(%v) Not Equal that(%v)", this.ExpiresAt, that1.ExpiresAt)
	}
	if this.Comment != that1.Comment {
		return fmt.Errorf("Comment this(%v) Not Equal that(%v)", this.Comment, that1.Comment)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	return nil
}
func (this *Override) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Override)
	if !ok {
		that2, ok := that.(Override)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Wildcard != that1.Wildcard {
		return false
	}
	if this.TargetUrl != that1.TargetUrl {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.ExpiresAt == nil {
		if this.ExpiresAt != nil {
			return false
		}
	} else if !this.ExpiresAt.Equal(*that1.ExpiresAt) {
		return false
	}
	if this.Comment != that1.Comment {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Overrides) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Overrides)
	if !ok {
		that2, ok := that.(Overrides)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Overrides")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Overrides but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Overrides but is not nil && this == nil")
	}
	if len(this.Items) != len(that1.Items) {
		return fmt.Errorf("Items this(%v) Not Equal that(%v)", len(this.Items), len(that1.Items))
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return fmt.Errorf("Items this[%v](%v) Not Equal that[%v](%v)", i, this.Items[i], i, that1.Items[i])
		}
	}
	return nil
}
func (this *Overrides) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Overrides)
	if !ok {
		that2, ok := that.(Overrides)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *OverrideRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OverrideRequest)
	if !ok {
		that2, ok := that.(OverrideRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OverrideRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OverrideRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OverrideRequest but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	return nil
}
func (this *OverrideRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OverrideRequest)
	if !ok {
		that2, ok := that.(OverrideRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *OverrideListRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OverrideListRequest)
	if !ok {
		that2, ok := that.(OverrideListRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OverrideListRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OverrideListRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OverrideListRequest but is not nil && this == nil")
	}
	if this.TargetSearch != that1.TargetSearch {
		return fmt.Errorf("TargetSearch this(%v) Not Equal that(%v)", this.TargetSearch, that1.TargetSearch)
	}
	if this.BaseSearch != that1.BaseSearch {
		return fmt.Errorf("BaseSearch this(%v) Not Equal that(%v)", this.BaseSearch, that1.BaseSearch)
	}
	return nil
}
func (this *OverrideListRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OverrideListRequest)
	if !ok {
		that2, ok := that.(OverrideListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TargetSearch != that1.TargetSearch {
		return false
	}
	if this.BaseSearch != that1.BaseSearch {
		return false
	}
	return true
}
func (this *OverrideListExpiredRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OverrideListExpiredRequest)
	if !ok {
		that2, ok := that.(OverrideListExpiredRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OverrideListExpiredRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OverrideListExpiredRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OverrideListExpiredRequest but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	return nil
}
func (this *OverrideListExpiredRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OverrideListExpiredRequest)
	if !ok {
		that2, ok := that.(OverrideListExpiredRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Override) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&msg.Override{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Wildcard: "+fmt.Sprintf("%#v", this.Wildcard)+",\n")
	s = append(s, "TargetUrl: "+fmt.Sprintf("%#v", this.TargetUrl)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ExpiresAt: "+fmt.Sprintf("%#v", this.ExpiresAt)+",\n")
	s = append(s, "Comment: "+fmt.Sprintf("%#v", this.Comment)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Overrides) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.Overrides{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.OverrideRequest{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.OverrideListRequest{")
	s = append(s, "TargetSearch: "+fmt.Sprintf("%#v", this.TargetSearch)+",\n")
	s = append(s, "BaseSearch: "+fmt.Sprintf("%#v", this.BaseSearch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideListExpiredRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.OverrideListExpiredRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUrlOverride(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Override) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Override) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Wildcard {
		dAtA[i] = 0x10
		i++
		if m.Wildcard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.TargetUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.TargetUrl)))
		i += copy(dAtA[i:], m.TargetUrl)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ExpiresAt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Comment) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.Comment)))
		i += copy(dAtA[i:], m.Comment)
	}
	if m.Type != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Overrides) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Overrides) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUrlOverride(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OverrideRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *OverrideListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TargetSearch) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.TargetSearch)))
		i += copy(dAtA[i:], m.TargetSearch)
	}
	if len(m.BaseSearch) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.BaseSearch)))
		i += copy(dAtA[i:], m.BaseSearch)
	}
	return i, nil
}

func (m *OverrideListExpiredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideListExpiredRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func encodeFixed64UrlOverride(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32UrlOverride(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUrlOverride(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Override) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	if m.Wildcard {
		n += 2
	}
	l = len(m.TargetUrl)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovUrlOverride(uint64(m.Type))
	}
	return n
}

func (m *Overrides) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovUrlOverride(uint64(l))
		}
	}
	return n
}

func (m *OverrideRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	return n
}

func (m *OverrideListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TargetSearch)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	l = len(m.BaseSearch)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	return n
}

func (m *OverrideListExpiredRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUrlOverride(uint64(m.Type))
	}
	return n
}

func sovUrlOverride(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUrlOverride(x uint64) (n int) {
	return sovUrlOverride(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Override) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Override{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Wildcard:` + fmt.Sprintf("%v", this.Wildcard) + `,`,
		`TargetUrl:` + fmt.Sprintf("%v", this.TargetUrl) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`ExpiresAt:` + strings.Replace(fmt.Sprintf("%v", this.ExpiresAt), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`Comment:` + fmt.Sprintf("%v", this.Comment) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Overrides) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Overrides{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "Override", "Override", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideRequest{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideListRequest{`,
		`TargetSearch:` + fmt.Sprintf("%v", this.TargetSearch) + `,`,
		`BaseSearch:` + fmt.Sprintf("%v", this.BaseSearch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideListExpiredRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideListExpiredRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUrlOverride(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Override) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Override: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Override: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wildcard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wildcard = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (OverrideType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Overrides) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Overrides: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Overrides: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Override{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSearch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSearch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseSearch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseSearch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideListExpiredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideListExpiredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideListExpiredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (OverrideType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUrlOverride(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUrlOverride
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUrlOverride
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUrlOverride(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUrlOverride = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUrlOverride   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zvelo/msg/url_override.proto", fileDescriptorUrlOverride) }

var fileDescriptorUrlOverride = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x6d, 0x9a, 0xc4, 0x93, 0x50, 0xa2, 0x2d, 0x52, 0xad, 0x00, 0x9b, 0x28, 0xbd,
	0x04, 0x10, 0x8e, 0x14, 0x24, 0xc4, 0x09, 0x94, 0x8a, 0x48, 0x44, 0x40, 0x22, 0x99, 0x06, 0x24,
	0x38, 0x44, 0x4e, 0x3c, 0xb8, 0x96, 0x6c, 0x6c, 0x76, 0xd7, 0x85, 0x70, 0xe2, 0x11, 0xfa, 0x18,
	0xbc, 0x02, 0x6f, 0xc0, 0xb1, 0x47, 0x6e, 0x34, 0xe6, 0xc2, 0xb1, 0x8f, 0x80, 0xbc, 0xce, 0x86,
	0x08, 0x38, 0xf4, 0xb6, 0xf3, 0xcf, 0x37, 0xe3, 0x99, 0x7f, 0x64, 0xb8, 0xf1, 0xe9, 0x04, 0x83,
	0xa8, 0x1b, 0x0a, 0xaf, 0x9b, 0xf0, 0x60, 0x1a, 0x9d, 0x20, 0xe7, 0xbe, 0x8b, 0x56, 0xcc, 0x23,
	0x19, 0x51, 0x43, 0x65, 0xad, 0x50, 0x78, 0x8d, 0xa6, 0x17, 0x45, 0x5e, 0x80, 0x5d, 0x95, 0x98,
	0x25, 0x6f, 0xbb, 0xd2, 0x0f, 0x51, 0x48, 0x27, 0x8c, 0x73, 0xb6, 0x71, 0xfd, 0x6f, 0x00, 0xc3,
	0x58, 0x2e, 0x56, 0xc9, 0xbb, 0x9e, 0x2f, 0x8f, 0x93, 0x99, 0x35, 0x8f, 0xc2, 0xae, 0x17, 0x79,
	0xd1, 0x1f, 0x2a, 0x8b, 0x54, 0xa0, 0x5e, 0x39, 0xde, 0xfe, 0xba, 0x05, 0x95, 0xf1, 0x6a, 0x14,
	0x5a, 0x87, 0xed, 0x84, 0x07, 0x26, 0x69, 0x91, 0x8e, 0x61, 0x67, 0x4f, 0xda, 0x80, 0xca, 0x07,
	0x3f, 0x70, 0xe7, 0x0e, 0x77, 0xcd, 0xad, 0x16, 0xe9, 0x54, 0xec, 0x75, 0x4c, 0x6f, 0x02, 0x48,
	0x87, 0x7b, 0x28, 0xa7, 0x59, 0xd1, 0xb6, 0x2a, 0x32, 0x72, 0x65, 0xc2, 0x03, 0xba, 0x0f, 0xe5,
	0x44, 0x20, 0x9f, 0xfa, 0xae, 0x59, 0x54, 0xb9, 0x52, 0x16, 0x0e, 0x5d, 0xfa, 0x08, 0x60, 0xce,
	0xd1, 0x91, 0xe8, 0x4e, 0x1d, 0x69, 0xee, 0xb4, 0x48, 0xa7, 0xda, 0x6b, 0x58, 0xf9, 0x4e, 0x96,
	0x9e, 0xd6, 0x3a, 0xd2, 0x4b, 0x1f, 0x16, 0x4f, 0x7f, 0x34, 0x89, 0x6d, 0xac, 0x6a, 0xfa, 0x32,
	0x6b, 0x80, 0x1f, 0x63, 0x9f, 0xa3, 0xc8, 0x1a, 0x94, 0x2e, 0xdb, 0x60, 0x55, 0xd3, 0x97, 0xd4,
	0x84, 0xf2, 0x3c, 0x0a, 0x43, 0x7c, 0x27, 0xcd, 0xb2, 0x1a, 0x4d, 0x87, 0xf4, 0x0e, 0x14, 0xe5,
	0x22, 0x46, 0xb3, 0xd2, 0x22, 0x9d, 0xdd, 0xde, 0xbe, 0xb5, 0xbe, 0x8a, 0xa5, 0x4d, 0x3a, 0x5a,
	0xc4, 0x68, 0x2b, 0xa8, 0x7d, 0x1f, 0x0c, 0xad, 0x0a, 0x7a, 0x0b, 0x76, 0x7c, 0x89, 0xa1, 0x30,
	0x49, 0x6b, 0xbb, 0x53, 0xed, 0xed, 0xfd, 0xa7, 0xd4, 0xce, 0x89, 0xf6, 0x01, 0x5c, 0x5d, 0x4b,
	0xf8, 0x3e, 0x41, 0x21, 0xff, 0x75, 0xbe, 0xfd, 0x06, 0xf6, 0x34, 0xf4, 0xcc, 0x17, 0x52, 0x83,
	0x07, 0x70, 0x65, 0x65, 0xba, 0x40, 0x87, 0xcf, 0x8f, 0xd5, 0x55, 0x0c, 0xbb, 0x96, 0x8b, 0x2f,
	0x94, 0x46, 0x9b, 0x50, 0x9d, 0x39, 0x02, 0x35, 0x92, 0x9f, 0x06, 0x32, 0x29, 0x07, 0xda, 0x43,
	0x68, 0x6c, 0x36, 0x1f, 0x28, 0x67, 0x5c, 0xfd, 0x0d, 0x6d, 0x02, 0xb9, 0x84, 0x09, 0xb7, 0x1f,
	0x40, 0x6d, 0x53, 0xa5, 0xd7, 0xa0, 0x3e, 0x19, 0x3d, 0x1d, 0x8d, 0x5f, 0x8d, 0xa6, 0xe3, 0x97,
	0x03, 0xdb, 0x1e, 0x3e, 0x1e, 0xd4, 0x0b, 0x94, 0xc2, 0xee, 0x93, 0xc9, 0xf3, 0xfe, 0x86, 0x46,
	0x0e, 0x1f, 0x9e, 0x2d, 0x59, 0xe1, 0xfb, 0x92, 0x15, 0xce, 0x97, 0x8c, 0x5c, 0x2c, 0x19, 0xf9,
	0x9c, 0x32, 0xf2, 0x25, 0x65, 0xe4, 0x5b, 0xca, 0xc8, 0x59, 0xca, 0xc8, 0x79, 0xca, 0xc8, 0xaf,
	0x94, 0x15, 0x2e, 0x52, 0x46, 0x4e, 0x7f, 0xb2, 0xc2, 0xeb, 0x5a, 0x3e, 0x89, 0xaf, 0xfe, 0xa2,
	0x59, 0x49, 0x9d, 0xfa, 0xde, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x53, 0xc0, 0x13, 0x59,
	0x03, 0x00, 0x00,
}
