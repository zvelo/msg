// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zvelo/msg/url_override.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf3 "github.com/golang/protobuf/ptypes/empty"

import time "time"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type OverrideType int32

const (
	UNKNOWN_OVERRIDE OverrideType = 0
	HUMAN_OVERRIDE   OverrideType = 1
)

var OverrideType_name = map[int32]string{
	0: "UNKNOWN_OVERRIDE",
	1: "HUMAN_OVERRIDE",
}
var OverrideType_value = map[string]int32{
	"UNKNOWN_OVERRIDE": 0,
	"HUMAN_OVERRIDE":   1,
}

func (OverrideType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{0} }

type OverrideChangeType int32

const (
	ADD_OVERRIDE OverrideChangeType = 0
	DEL_OVERRIDE OverrideChangeType = 1
)

var OverrideChangeType_name = map[int32]string{
	0: "ADD_OVERRIDE",
	1: "DEL_OVERRIDE",
}
var OverrideChangeType_value = map[string]int32{
	"ADD_OVERRIDE": 0,
	"DEL_OVERRIDE": 1,
}

func (OverrideChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{1} }

type Override struct {
	Url       string       `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Wildcard  bool         `protobuf:"varint,2,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
	TargetUrl string       `protobuf:"bytes,3,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
	UserId    string       `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedAt *time.Time   `protobuf:"bytes,5,opt,name=created_at,json=createdAt,stdtime" json:"created_at,omitempty"`
	ExpiresAt *time.Time   `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,stdtime" json:"expires_at,omitempty"`
	Comment   string       `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	Type      OverrideType `protobuf:"varint,8,opt,name=type,proto3,enum=zvelo.msg.OverrideType" json:"type,omitempty"`
}

func (m *Override) Reset()                    { *m = Override{} }
func (*Override) ProtoMessage()               {}
func (*Override) Descriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{0} }

func (m *Override) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Override) GetWildcard() bool {
	if m != nil {
		return m.Wildcard
	}
	return false
}

func (m *Override) GetTargetUrl() string {
	if m != nil {
		return m.TargetUrl
	}
	return ""
}

func (m *Override) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Override) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Override) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *Override) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Override) GetType() OverrideType {
	if m != nil {
		return m.Type
	}
	return UNKNOWN_OVERRIDE
}

type OverrideChange struct {
	Override *Override          `protobuf:"bytes,1,opt,name=override" json:"override,omitempty"`
	Type     OverrideChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=zvelo.msg.OverrideChangeType" json:"type,omitempty"`
}

func (m *OverrideChange) Reset()                    { *m = OverrideChange{} }
func (*OverrideChange) ProtoMessage()               {}
func (*OverrideChange) Descriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{1} }

func (m *OverrideChange) GetOverride() *Override {
	if m != nil {
		return m.Override
	}
	return nil
}

func (m *OverrideChange) GetType() OverrideChangeType {
	if m != nil {
		return m.Type
	}
	return ADD_OVERRIDE
}

type Overrides struct {
	Items []*Override `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Overrides) Reset()                    { *m = Overrides{} }
func (*Overrides) ProtoMessage()               {}
func (*Overrides) Descriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{2} }

func (m *Overrides) GetItems() []*Override {
	if m != nil {
		return m.Items
	}
	return nil
}

type OverrideRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *OverrideRequest) Reset()                    { *m = OverrideRequest{} }
func (*OverrideRequest) ProtoMessage()               {}
func (*OverrideRequest) Descriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{3} }

func (m *OverrideRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type OverrideListRequest struct {
	TargetSearch string `protobuf:"bytes,2,opt,name=target_search,json=targetSearch,proto3" json:"target_search,omitempty"`
	BaseSearch   string `protobuf:"bytes,3,opt,name=base_search,json=baseSearch,proto3" json:"base_search,omitempty"`
}

func (m *OverrideListRequest) Reset()                    { *m = OverrideListRequest{} }
func (*OverrideListRequest) ProtoMessage()               {}
func (*OverrideListRequest) Descriptor() ([]byte, []int) { return fileDescriptorUrlOverride, []int{4} }

func (m *OverrideListRequest) GetTargetSearch() string {
	if m != nil {
		return m.TargetSearch
	}
	return ""
}

func (m *OverrideListRequest) GetBaseSearch() string {
	if m != nil {
		return m.BaseSearch
	}
	return ""
}

type OverrideListExpiredRequest struct {
	Type OverrideType `protobuf:"varint,1,opt,name=type,proto3,enum=zvelo.msg.OverrideType" json:"type,omitempty"`
}

func (m *OverrideListExpiredRequest) Reset()      { *m = OverrideListExpiredRequest{} }
func (*OverrideListExpiredRequest) ProtoMessage() {}
func (*OverrideListExpiredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUrlOverride, []int{5}
}

func (m *OverrideListExpiredRequest) GetType() OverrideType {
	if m != nil {
		return m.Type
	}
	return UNKNOWN_OVERRIDE
}

func init() {
	proto.RegisterType((*Override)(nil), "zvelo.msg.Override")
	proto.RegisterType((*OverrideChange)(nil), "zvelo.msg.OverrideChange")
	proto.RegisterType((*Overrides)(nil), "zvelo.msg.Overrides")
	proto.RegisterType((*OverrideRequest)(nil), "zvelo.msg.OverrideRequest")
	proto.RegisterType((*OverrideListRequest)(nil), "zvelo.msg.OverrideListRequest")
	proto.RegisterType((*OverrideListExpiredRequest)(nil), "zvelo.msg.OverrideListExpiredRequest")
	proto.RegisterEnum("zvelo.msg.OverrideType", OverrideType_name, OverrideType_value)
	proto.RegisterEnum("zvelo.msg.OverrideChangeType", OverrideChangeType_name, OverrideChangeType_value)
}
func (x OverrideType) String() string {
	s, ok := OverrideType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OverrideChangeType) String() string {
	s, ok := OverrideChangeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Override) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Override)
	if !ok {
		that2, ok := that.(Override)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Override")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Override but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Override but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if this.Wildcard != that1.Wildcard {
		return fmt.Errorf("Wildcard this(%v) Not Equal that(%v)", this.Wildcard, that1.Wildcard)
	}
	if this.TargetUrl != that1.TargetUrl {
		return fmt.Errorf("TargetUrl this(%v) Not Equal that(%v)", this.TargetUrl, that1.TargetUrl)
	}
	if this.UserId != that1.UserId {
		return fmt.Errorf("UserId this(%v) Not Equal that(%v)", this.UserId, that1.UserId)
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return fmt.Errorf("this.CreatedAt != nil && that1.CreatedAt == nil")
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if that1.ExpiresAt == nil {
		if this.ExpiresAt != nil {
			return fmt.Errorf("this.ExpiresAt != nil && that1.ExpiresAt == nil")
		}
	} else if !this.ExpiresAt.Equal(*that1.ExpiresAt) {
		return fmt.Errorf("ExpiresAt this(%v) Not Equal that(%v)", this.ExpiresAt, that1.ExpiresAt)
	}
	if this.Comment != that1.Comment {
		return fmt.Errorf("Comment this(%v) Not Equal that(%v)", this.Comment, that1.Comment)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	return nil
}
func (this *Override) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Override)
	if !ok {
		that2, ok := that.(Override)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Wildcard != that1.Wildcard {
		return false
	}
	if this.TargetUrl != that1.TargetUrl {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.ExpiresAt == nil {
		if this.ExpiresAt != nil {
			return false
		}
	} else if !this.ExpiresAt.Equal(*that1.ExpiresAt) {
		return false
	}
	if this.Comment != that1.Comment {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *OverrideChange) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OverrideChange)
	if !ok {
		that2, ok := that.(OverrideChange)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OverrideChange")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OverrideChange but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OverrideChange but is not nil && this == nil")
	}
	if !this.Override.Equal(that1.Override) {
		return fmt.Errorf("Override this(%v) Not Equal that(%v)", this.Override, that1.Override)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	return nil
}
func (this *OverrideChange) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OverrideChange)
	if !ok {
		that2, ok := that.(OverrideChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Override.Equal(that1.Override) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Overrides) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Overrides)
	if !ok {
		that2, ok := that.(Overrides)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Overrides")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Overrides but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Overrides but is not nil && this == nil")
	}
	if len(this.Items) != len(that1.Items) {
		return fmt.Errorf("Items this(%v) Not Equal that(%v)", len(this.Items), len(that1.Items))
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return fmt.Errorf("Items this[%v](%v) Not Equal that[%v](%v)", i, this.Items[i], i, that1.Items[i])
		}
	}
	return nil
}
func (this *Overrides) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Overrides)
	if !ok {
		that2, ok := that.(Overrides)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *OverrideRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OverrideRequest)
	if !ok {
		that2, ok := that.(OverrideRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OverrideRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OverrideRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OverrideRequest but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	return nil
}
func (this *OverrideRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OverrideRequest)
	if !ok {
		that2, ok := that.(OverrideRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *OverrideListRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OverrideListRequest)
	if !ok {
		that2, ok := that.(OverrideListRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OverrideListRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OverrideListRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OverrideListRequest but is not nil && this == nil")
	}
	if this.TargetSearch != that1.TargetSearch {
		return fmt.Errorf("TargetSearch this(%v) Not Equal that(%v)", this.TargetSearch, that1.TargetSearch)
	}
	if this.BaseSearch != that1.BaseSearch {
		return fmt.Errorf("BaseSearch this(%v) Not Equal that(%v)", this.BaseSearch, that1.BaseSearch)
	}
	return nil
}
func (this *OverrideListRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OverrideListRequest)
	if !ok {
		that2, ok := that.(OverrideListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TargetSearch != that1.TargetSearch {
		return false
	}
	if this.BaseSearch != that1.BaseSearch {
		return false
	}
	return true
}
func (this *OverrideListExpiredRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OverrideListExpiredRequest)
	if !ok {
		that2, ok := that.(OverrideListExpiredRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OverrideListExpiredRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OverrideListExpiredRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OverrideListExpiredRequest but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	return nil
}
func (this *OverrideListExpiredRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OverrideListExpiredRequest)
	if !ok {
		that2, ok := that.(OverrideListExpiredRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Override) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&msg.Override{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Wildcard: "+fmt.Sprintf("%#v", this.Wildcard)+",\n")
	s = append(s, "TargetUrl: "+fmt.Sprintf("%#v", this.TargetUrl)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ExpiresAt: "+fmt.Sprintf("%#v", this.ExpiresAt)+",\n")
	s = append(s, "Comment: "+fmt.Sprintf("%#v", this.Comment)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.OverrideChange{")
	if this.Override != nil {
		s = append(s, "Override: "+fmt.Sprintf("%#v", this.Override)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Overrides) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.Overrides{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.OverrideRequest{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.OverrideListRequest{")
	s = append(s, "TargetSearch: "+fmt.Sprintf("%#v", this.TargetSearch)+",\n")
	s = append(s, "BaseSearch: "+fmt.Sprintf("%#v", this.BaseSearch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideListExpiredRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.OverrideListExpiredRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUrlOverride(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OverrideV1 service

type OverrideV1Client interface {
	Get(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*Override, error)
	Add(ctx context.Context, in *Override, opts ...grpc.CallOption) (*Override, error)
	Delete(ctx context.Context, in *Override, opts ...grpc.CallOption) (*Override, error)
	Matching(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*Override, error)
	ListAll(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*Overrides, error)
	List(ctx context.Context, in *OverrideListRequest, opts ...grpc.CallOption) (*Overrides, error)
	ListExpired(ctx context.Context, in *OverrideListExpiredRequest, opts ...grpc.CallOption) (*Overrides, error)
}

type overrideV1Client struct {
	cc *grpc.ClientConn
}

func NewOverrideV1Client(cc *grpc.ClientConn) OverrideV1Client {
	return &overrideV1Client{cc}
}

func (c *overrideV1Client) Get(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*Override, error) {
	out := new(Override)
	err := grpc.Invoke(ctx, "/zvelo.msg.OverrideV1/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overrideV1Client) Add(ctx context.Context, in *Override, opts ...grpc.CallOption) (*Override, error) {
	out := new(Override)
	err := grpc.Invoke(ctx, "/zvelo.msg.OverrideV1/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overrideV1Client) Delete(ctx context.Context, in *Override, opts ...grpc.CallOption) (*Override, error) {
	out := new(Override)
	err := grpc.Invoke(ctx, "/zvelo.msg.OverrideV1/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overrideV1Client) Matching(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*Override, error) {
	out := new(Override)
	err := grpc.Invoke(ctx, "/zvelo.msg.OverrideV1/Matching", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overrideV1Client) ListAll(ctx context.Context, in *google_protobuf3.Empty, opts ...grpc.CallOption) (*Overrides, error) {
	out := new(Overrides)
	err := grpc.Invoke(ctx, "/zvelo.msg.OverrideV1/ListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overrideV1Client) List(ctx context.Context, in *OverrideListRequest, opts ...grpc.CallOption) (*Overrides, error) {
	out := new(Overrides)
	err := grpc.Invoke(ctx, "/zvelo.msg.OverrideV1/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overrideV1Client) ListExpired(ctx context.Context, in *OverrideListExpiredRequest, opts ...grpc.CallOption) (*Overrides, error) {
	out := new(Overrides)
	err := grpc.Invoke(ctx, "/zvelo.msg.OverrideV1/ListExpired", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OverrideV1 service

type OverrideV1Server interface {
	Get(context.Context, *OverrideRequest) (*Override, error)
	Add(context.Context, *Override) (*Override, error)
	Delete(context.Context, *Override) (*Override, error)
	Matching(context.Context, *OverrideRequest) (*Override, error)
	ListAll(context.Context, *google_protobuf3.Empty) (*Overrides, error)
	List(context.Context, *OverrideListRequest) (*Overrides, error)
	ListExpired(context.Context, *OverrideListExpiredRequest) (*Overrides, error)
}

func RegisterOverrideV1Server(s *grpc.Server, srv OverrideV1Server) {
	s.RegisterService(&_OverrideV1_serviceDesc, srv)
}

func _OverrideV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverrideV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.OverrideV1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverrideV1Server).Get(ctx, req.(*OverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OverrideV1_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Override)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverrideV1Server).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.OverrideV1/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverrideV1Server).Add(ctx, req.(*Override))
	}
	return interceptor(ctx, in, info, handler)
}

func _OverrideV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Override)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverrideV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.OverrideV1/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverrideV1Server).Delete(ctx, req.(*Override))
	}
	return interceptor(ctx, in, info, handler)
}

func _OverrideV1_Matching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverrideV1Server).Matching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.OverrideV1/Matching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverrideV1Server).Matching(ctx, req.(*OverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OverrideV1_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf3.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverrideV1Server).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.OverrideV1/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverrideV1Server).ListAll(ctx, req.(*google_protobuf3.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OverrideV1_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverrideV1Server).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.OverrideV1/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverrideV1Server).List(ctx, req.(*OverrideListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OverrideV1_ListExpired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideListExpiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverrideV1Server).ListExpired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.OverrideV1/ListExpired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverrideV1Server).ListExpired(ctx, req.(*OverrideListExpiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OverrideV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zvelo.msg.OverrideV1",
	HandlerType: (*OverrideV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _OverrideV1_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _OverrideV1_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OverrideV1_Delete_Handler,
		},
		{
			MethodName: "Matching",
			Handler:    _OverrideV1_Matching_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _OverrideV1_ListAll_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OverrideV1_List_Handler,
		},
		{
			MethodName: "ListExpired",
			Handler:    _OverrideV1_ListExpired_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zvelo/msg/url_override.proto",
}

func (m *Override) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Override) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Wildcard {
		dAtA[i] = 0x10
		i++
		if m.Wildcard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.TargetUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.TargetUrl)))
		i += copy(dAtA[i:], m.TargetUrl)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ExpiresAt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Comment) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.Comment)))
		i += copy(dAtA[i:], m.Comment)
	}
	if m.Type != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *OverrideChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Override != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(m.Override.Size()))
		n3, err := m.Override.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Overrides) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Overrides) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUrlOverride(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OverrideRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *OverrideListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TargetSearch) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.TargetSearch)))
		i += copy(dAtA[i:], m.TargetSearch)
	}
	if len(m.BaseSearch) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(len(m.BaseSearch)))
		i += copy(dAtA[i:], m.BaseSearch)
	}
	return i, nil
}

func (m *OverrideListExpiredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideListExpiredRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUrlOverride(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func encodeFixed64UrlOverride(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32UrlOverride(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUrlOverride(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Override) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	if m.Wildcard {
		n += 2
	}
	l = len(m.TargetUrl)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovUrlOverride(uint64(m.Type))
	}
	return n
}

func (m *OverrideChange) Size() (n int) {
	var l int
	_ = l
	if m.Override != nil {
		l = m.Override.Size()
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovUrlOverride(uint64(m.Type))
	}
	return n
}

func (m *Overrides) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovUrlOverride(uint64(l))
		}
	}
	return n
}

func (m *OverrideRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	return n
}

func (m *OverrideListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TargetSearch)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	l = len(m.BaseSearch)
	if l > 0 {
		n += 1 + l + sovUrlOverride(uint64(l))
	}
	return n
}

func (m *OverrideListExpiredRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUrlOverride(uint64(m.Type))
	}
	return n
}

func sovUrlOverride(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUrlOverride(x uint64) (n int) {
	return sovUrlOverride(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Override) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Override{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Wildcard:` + fmt.Sprintf("%v", this.Wildcard) + `,`,
		`TargetUrl:` + fmt.Sprintf("%v", this.TargetUrl) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`ExpiresAt:` + strings.Replace(fmt.Sprintf("%v", this.ExpiresAt), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`Comment:` + fmt.Sprintf("%v", this.Comment) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideChange{`,
		`Override:` + strings.Replace(fmt.Sprintf("%v", this.Override), "Override", "Override", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Overrides) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Overrides{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "Override", "Override", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideRequest{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideListRequest{`,
		`TargetSearch:` + fmt.Sprintf("%v", this.TargetSearch) + `,`,
		`BaseSearch:` + fmt.Sprintf("%v", this.BaseSearch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideListExpiredRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideListExpiredRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUrlOverride(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Override) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Override: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Override: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wildcard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wildcard = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (OverrideType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Override", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Override == nil {
				m.Override = &Override{}
			}
			if err := m.Override.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (OverrideChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Overrides) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Overrides: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Overrides: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Override{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSearch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSearch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseSearch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrlOverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseSearch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideListExpiredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideListExpiredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideListExpiredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (OverrideType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUrlOverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUrlOverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUrlOverride(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUrlOverride
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUrlOverride
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUrlOverride
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUrlOverride
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUrlOverride(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUrlOverride = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUrlOverride   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zvelo/msg/url_override.proto", fileDescriptorUrlOverride) }

var fileDescriptorUrlOverride = []byte{
	// 677 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xf5, 0x34, 0x69, 0x7e, 0x6e, 0xf2, 0xf5, 0x8b, 0xa6, 0x15, 0xb5, 0x0c, 0x9d, 0x46, 0xae,
	0x90, 0x42, 0x11, 0x8e, 0x1a, 0x10, 0x2a, 0x0b, 0x8a, 0x52, 0x12, 0x41, 0x45, 0x7f, 0x24, 0xd3,
	0x16, 0x09, 0x16, 0x91, 0x13, 0x0f, 0x8e, 0x25, 0xbb, 0x0e, 0xf6, 0xa4, 0x50, 0x56, 0x3c, 0x42,
	0x1f, 0x83, 0x37, 0x40, 0xbc, 0x01, 0xcb, 0x2e, 0xd9, 0xd1, 0x98, 0x0d, 0xcb, 0x3e, 0x02, 0xf2,
	0x38, 0x13, 0x0c, 0x75, 0xa4, 0xc2, 0xce, 0xf7, 0xdc, 0x73, 0xce, 0xbd, 0x73, 0xef, 0x78, 0xe0,
	0xc6, 0xfb, 0x63, 0xea, 0x78, 0x75, 0x37, 0xb0, 0xea, 0x43, 0xdf, 0xe9, 0x78, 0xc7, 0xd4, 0xf7,
	0x6d, 0x93, 0x6a, 0x03, 0xdf, 0x63, 0x1e, 0x2e, 0xf2, 0xac, 0xe6, 0x06, 0x96, 0x72, 0xc7, 0xb2,
	0x59, 0x7f, 0xd8, 0xd5, 0x7a, 0x9e, 0x5b, 0xb7, 0x3c, 0xcb, 0xab, 0x73, 0x46, 0x77, 0xf8, 0x9a,
	0x47, 0x3c, 0xe0, 0x5f, 0xb1, 0x52, 0x59, 0xb6, 0x3c, 0xcf, 0x72, 0xe8, 0x2f, 0x16, 0xb3, 0x5d,
	0x1a, 0x30, 0xc3, 0x1d, 0x8c, 0x09, 0xd7, 0xff, 0x24, 0x50, 0x77, 0xc0, 0x4e, 0xe2, 0xa4, 0xfa,
	0x79, 0x06, 0x0a, 0x7b, 0xe3, 0x56, 0x70, 0x05, 0x32, 0x43, 0xdf, 0x91, 0x51, 0x15, 0xd5, 0x8a,
	0x7a, 0xf4, 0x89, 0x15, 0x28, 0xbc, 0xb5, 0x1d, 0xb3, 0x67, 0xf8, 0xa6, 0x3c, 0x53, 0x45, 0xb5,
	0x82, 0x3e, 0x89, 0xf1, 0x12, 0x00, 0x33, 0x7c, 0x8b, 0xb2, 0x4e, 0x24, 0xca, 0x70, 0x51, 0x31,
	0x46, 0x0e, 0x7c, 0x07, 0x2f, 0x42, 0x7e, 0x18, 0x50, 0xbf, 0x63, 0x9b, 0x72, 0x96, 0xe7, 0x72,
	0x51, 0xb8, 0x65, 0xe2, 0x47, 0x00, 0x3d, 0x9f, 0x1a, 0x8c, 0x9a, 0x1d, 0x83, 0xc9, 0xb3, 0x55,
	0x54, 0x2b, 0x35, 0x14, 0x2d, 0x6e, 0x52, 0x13, 0x4d, 0x6a, 0xfb, 0xe2, 0x14, 0x9b, 0xd9, 0xd3,
	0x6f, 0xcb, 0x48, 0x2f, 0x8e, 0x35, 0x4d, 0x16, 0x19, 0xd0, 0x77, 0x03, 0xdb, 0xa7, 0x41, 0x64,
	0x90, 0xbb, 0xaa, 0xc1, 0x58, 0xd3, 0x64, 0x58, 0x86, 0x7c, 0xcf, 0x73, 0x5d, 0x7a, 0xc4, 0xe4,
	0x3c, 0x6f, 0x4d, 0x84, 0xf8, 0x36, 0x64, 0xd9, 0xc9, 0x80, 0xca, 0x85, 0x2a, 0xaa, 0xcd, 0x35,
	0x16, 0xb5, 0xc9, 0x56, 0x34, 0x31, 0xa4, 0xfd, 0x93, 0x01, 0xd5, 0x39, 0x49, 0x65, 0x30, 0x27,
	0xd0, 0xc7, 0x7d, 0xe3, 0xc8, 0xa2, 0xb8, 0x0e, 0x05, 0xb1, 0x57, 0x3e, 0xc5, 0x52, 0x63, 0x3e,
	0xc5, 0x42, 0x9f, 0x90, 0xf0, 0xda, 0xb8, 0xde, 0x0c, 0xaf, 0xb7, 0x94, 0x42, 0x8e, 0x9d, 0x13,
	0x55, 0xef, 0x43, 0x51, 0xe4, 0x02, 0x7c, 0x0b, 0x66, 0x6d, 0x46, 0xdd, 0x40, 0x46, 0xd5, 0xcc,
	0xb4, 0x6a, 0x31, 0x43, 0x5d, 0x81, 0xff, 0x27, 0x10, 0x7d, 0x33, 0xa4, 0x01, 0xbb, 0xbc, 0x6f,
	0xf5, 0x15, 0xcc, 0x0b, 0xd2, 0xb6, 0x1d, 0x30, 0x41, 0x5c, 0x81, 0xff, 0xc6, 0xab, 0x0e, 0xa8,
	0xe1, 0xf7, 0xfa, 0xbc, 0xdf, 0xa2, 0x5e, 0x8e, 0xc1, 0xe7, 0x1c, 0xc3, 0xcb, 0x50, 0xea, 0x1a,
	0x01, 0x15, 0x94, 0xf8, 0x42, 0x40, 0x04, 0xc5, 0x04, 0x75, 0x0b, 0x94, 0xa4, 0x79, 0x9b, 0xef,
	0xc3, 0x14, 0x35, 0xc4, 0xe8, 0xd1, 0x15, 0x46, 0xbf, 0xba, 0x0e, 0xe5, 0x24, 0x8a, 0x17, 0xa0,
	0x72, 0xb0, 0xfb, 0x6c, 0x77, 0xef, 0xc5, 0x6e, 0x67, 0xef, 0xb0, 0xad, 0xeb, 0x5b, 0xad, 0x76,
	0x45, 0xc2, 0x18, 0xe6, 0x9e, 0x1e, 0xec, 0x34, 0x13, 0x18, 0x5a, 0x5d, 0x07, 0x7c, 0x79, 0xb4,
	0xb8, 0x02, 0xe5, 0x66, 0xab, 0x95, 0xd4, 0x56, 0xa0, 0xdc, 0x6a, 0x6f, 0x27, 0x94, 0x8d, 0x4f,
	0x19, 0x00, 0x21, 0x3d, 0x5c, 0xc3, 0xeb, 0x90, 0x79, 0x42, 0x19, 0x56, 0xd2, 0x46, 0x1e, 0x1f,
	0x49, 0x49, 0x5b, 0x87, 0x2a, 0xe1, 0x35, 0xc8, 0x34, 0x4d, 0x13, 0xa7, 0x65, 0xa7, 0x49, 0xee,
	0x41, 0xae, 0x45, 0x1d, 0xca, 0xe8, 0x5f, 0xa9, 0x1e, 0x42, 0x61, 0xc7, 0x60, 0xbd, 0xbe, 0x7d,
	0x64, 0xfd, 0x4b, 0x9f, 0x0f, 0x20, 0x1f, 0xed, 0xa9, 0xe9, 0x38, 0xf8, 0xda, 0xa5, 0xdf, 0xab,
	0x1d, 0x3d, 0x22, 0xca, 0x42, 0x8a, 0x32, 0x50, 0x25, 0xbc, 0x01, 0xd9, 0x48, 0x8a, 0x49, 0x4a,
	0x3e, 0x71, 0xb1, 0xa6, 0xea, 0xb7, 0xa1, 0x94, 0xb8, 0x22, 0xf8, 0xe6, 0x14, 0x9b, 0xdf, 0xaf,
	0xd0, 0x34, 0xb7, 0xcd, 0x8d, 0xb3, 0x11, 0x91, 0xbe, 0x8e, 0x88, 0x74, 0x3e, 0x22, 0xe8, 0x62,
	0x44, 0xd0, 0x87, 0x90, 0xa0, 0x8f, 0x21, 0x41, 0x5f, 0x42, 0x82, 0xce, 0x42, 0x82, 0xce, 0x43,
	0x82, 0x7e, 0x84, 0x44, 0xba, 0x08, 0x09, 0x3a, 0xfd, 0x4e, 0xa4, 0x97, 0xe5, 0xd8, 0xc8, 0xe6,
	0xef, 0x75, 0x37, 0xc7, 0x4f, 0x7d, 0xf7, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xb5, 0x94,
	0xa7, 0xc3, 0x05, 0x00, 0x00,
}
