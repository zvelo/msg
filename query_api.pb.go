// Code generated by protoc-gen-gogo.
// source: zvelo/msg/query_api.proto
// DO NOT EDIT!

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResultRequest struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *ResultRequest) Reset()                    { *m = ResultRequest{} }
func (*ResultRequest) ProtoMessage()               {}
func (*ResultRequest) Descriptor() ([]byte, []int) { return fileDescriptorQueryApi, []int{0} }

func (m *ResultRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func init() {
	proto.RegisterType((*ResultRequest)(nil), "zvelo.msg.ResultRequest")
}
func (this *ResultRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResultRequest)
	if !ok {
		that2, ok := that.(ResultRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ResultRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ResultRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ResultRequest but is not nil && this == nil")
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	return nil
}
func (this *ResultRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResultRequest)
	if !ok {
		that2, ok := that.(ResultRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *ResultRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.ResultRequest{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQueryApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Query service

type QueryClient interface {
	QueryURLV1(ctx context.Context, in *QueryURLRequests, opts ...grpc.CallOption) (*QueryReplies, error)
	QueryURLResultV1(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*QueryResult, error)
	QueryContentV1(ctx context.Context, in *QueryContentRequests, opts ...grpc.CallOption) (*QueryReplies, error)
	QueryContentResultV1(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*QueryResult, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryURLV1(ctx context.Context, in *QueryURLRequests, opts ...grpc.CallOption) (*QueryReplies, error) {
	out := new(QueryReplies)
	err := grpc.Invoke(ctx, "/zvelo.msg.Query/QueryURLV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryURLResultV1(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := grpc.Invoke(ctx, "/zvelo.msg.Query/QueryURLResultV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryContentV1(ctx context.Context, in *QueryContentRequests, opts ...grpc.CallOption) (*QueryReplies, error) {
	out := new(QueryReplies)
	err := grpc.Invoke(ctx, "/zvelo.msg.Query/QueryContentV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryContentResultV1(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := grpc.Invoke(ctx, "/zvelo.msg.Query/QueryContentResultV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Query service

type QueryServer interface {
	QueryURLV1(context.Context, *QueryURLRequests) (*QueryReplies, error)
	QueryURLResultV1(context.Context, *ResultRequest) (*QueryResult, error)
	QueryContentV1(context.Context, *QueryContentRequests) (*QueryReplies, error)
	QueryContentResultV1(context.Context, *ResultRequest) (*QueryResult, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryURLV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryURLRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryURLV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.Query/QueryURLV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryURLV1(ctx, req.(*QueryURLRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryURLResultV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryURLResultV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.Query/QueryURLResultV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryURLResultV1(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryContentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContentRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryContentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.Query/QueryContentV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryContentV1(ctx, req.(*QueryContentRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryContentResultV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryContentResultV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.Query/QueryContentResultV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryContentResultV1(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zvelo.msg.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryURLV1",
			Handler:    _Query_QueryURLV1_Handler,
		},
		{
			MethodName: "QueryURLResultV1",
			Handler:    _Query_QueryURLResultV1_Handler,
		},
		{
			MethodName: "QueryContentV1",
			Handler:    _Query_QueryContentV1_Handler,
		},
		{
			MethodName: "QueryContentResultV1",
			Handler:    _Query_QueryContentResultV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zvelo/msg/query_api.proto",
}

func (m *ResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueryApi(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	return i, nil
}

func encodeFixed64QueryApi(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32QueryApi(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintQueryApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResultRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQueryApi(uint64(l))
	}
	return n
}

func sovQueryApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQueryApi(x uint64) (n int) {
	return sovQueryApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ResultRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResultRequest{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQueryApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQueryApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQueryApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQueryApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQueryApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zvelo/msg/query_api.proto", fileDescriptorQueryApi) }

var fileDescriptorQueryApi = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xac, 0x2a, 0x4b, 0xcd,
	0xc9, 0xd7, 0xcf, 0x2d, 0x4e, 0xd7, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0x8c, 0x4f, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0x4b, 0xe9, 0xe5, 0x16, 0xa7, 0x4b, 0xc9, 0xa0,
	0xab, 0x2a, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x81, 0x28, 0x94, 0x42, 0x32, 0x03, 0xcc, 0x42, 0x98,
	0x21, 0x25, 0x93, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0xaa, 0x9f, 0x58, 0x90, 0xa9, 0x9f, 0x98, 0x97,
	0x97, 0x5f, 0x92, 0x58, 0x92, 0x99, 0x9f, 0x57, 0x0c, 0x91, 0x55, 0xd2, 0xe3, 0xe2, 0x0d, 0x02,
	0x1b, 0x14, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xcb, 0xc5, 0x55, 0x04, 0x61, 0xc6,
	0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x71, 0x42, 0x45, 0x3c, 0x53, 0x8c, 0x36,
	0x33, 0x73, 0xb1, 0x06, 0x82, 0xec, 0x17, 0x8a, 0xe3, 0xe2, 0x02, 0x33, 0x42, 0x83, 0x7c, 0xc2,
	0x0c, 0x85, 0xa4, 0xf5, 0xe0, 0x4e, 0xd5, 0x83, 0x09, 0x43, 0x8d, 0x2c, 0x96, 0x12, 0x47, 0x97,
	0x0c, 0x4a, 0x2d, 0xc8, 0xc9, 0x4c, 0x2d, 0x56, 0x92, 0x6a, 0xba, 0xfc, 0x64, 0x32, 0x93, 0x88,
	0x12, 0xbf, 0x7e, 0x99, 0x21, 0xd8, 0x5b, 0x99, 0xa9, 0xc5, 0xfa, 0xa5, 0x45, 0x39, 0x56, 0x8c,
	0x5a, 0x42, 0x59, 0x5c, 0x02, 0x08, 0x83, 0x40, 0x2e, 0x0c, 0x33, 0x14, 0x92, 0x40, 0x32, 0x08,
	0xc5, 0xd9, 0x52, 0x62, 0x98, 0x56, 0x80, 0xa4, 0x95, 0x54, 0xc0, 0x36, 0xc8, 0x09, 0xc9, 0xa0,
	0xd9, 0xa0, 0x5f, 0x8d, 0xf0, 0x65, 0xad, 0x50, 0x16, 0x17, 0x1f, 0x58, 0x93, 0x73, 0x7e, 0x5e,
	0x49, 0x6a, 0x1e, 0xc8, 0x26, 0x79, 0x74, 0xf3, 0xa0, 0x52, 0x84, 0xfd, 0x24, 0x07, 0xb6, 0x51,
	0x42, 0x49, 0x18, 0xd9, 0xc6, 0x64, 0x88, 0x6e, 0x90, 0xbf, 0x8a, 0xb8, 0x44, 0x50, 0x0d, 0x24,
	0xdb, 0x6f, 0x1a, 0x60, 0x9b, 0x94, 0x84, 0x14, 0xb0, 0xd8, 0x84, 0xe2, 0x3f, 0x27, 0xbb, 0x0b,
	0x0f, 0xe5, 0x18, 0x6e, 0x3c, 0x94, 0x63, 0x78, 0xf0, 0x50, 0x8e, 0xf1, 0xc3, 0x43, 0x39, 0xc6,
	0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c,
	0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1,
	0x1c, 0x43, 0x14, 0x0f, 0xc4, 0xca, 0x4c, 0x70, 0x9a, 0x4a, 0x62, 0x03, 0x27, 0x16, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x3d, 0x47, 0xf6, 0xab, 0x02, 0x00, 0x00,
}
