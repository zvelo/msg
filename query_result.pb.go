// Code generated by protoc-gen-go.
// source: zvelo/msg/query_result.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryResult struct {
	RequestId       string        `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	TrackingId      string        `protobuf:"bytes,2,opt,name=tracking_id,json=trackingId" json:"tracking_id,omitempty"`
	Status          *Status       `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	RequestDataset  []DataSetType `protobuf:"varint,6,rep,packed,name=request_dataset,json=requestDataset,enum=zvelo.msg.DataSetType" json:"request_dataset,omitempty"`
	ResponseDataset *DataSet      `protobuf:"bytes,7,opt,name=response_dataset,json=responseDataset" json:"response_dataset,omitempty"`
	Url             string        `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *QueryResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QueryResult) GetResponseDataset() *DataSet {
	if m != nil {
		return m.ResponseDataset
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryResult)(nil), "zvelo.msg.QueryResult")
}

func init() { proto.RegisterFile("zvelo/msg/query_result.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xa9, 0x2a, 0x4b, 0xcd,
	0xc9, 0xd7, 0xcf, 0x2d, 0x4e, 0xd7, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0x8c, 0x2f, 0x4a, 0x2d, 0x2e,
	0xcd, 0x29, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0xcb, 0xea, 0x01, 0x65, 0xa5,
	0xc4, 0x11, 0x0a, 0x53, 0x12, 0x4b, 0x12, 0x8b, 0x53, 0xa1, 0x6a, 0xa4, 0xc4, 0x10, 0x12, 0xc5,
	0x25, 0x89, 0x25, 0xa5, 0xc5, 0x10, 0x71, 0xa5, 0x69, 0x4c, 0x5c, 0xdc, 0x81, 0x20, 0x23, 0x83,
	0xc0, 0x26, 0x0a, 0xc9, 0x72, 0x71, 0x15, 0xa5, 0x02, 0xed, 0x28, 0x2e, 0x89, 0xcf, 0x4c, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x84, 0x8a, 0x78, 0xa6, 0x08, 0xc9, 0x73, 0x71, 0x97,
	0x14, 0x25, 0x26, 0x67, 0x67, 0xe6, 0xa5, 0x83, 0xe4, 0x99, 0xc0, 0xf2, 0x5c, 0x30, 0x21, 0xa0,
	0x02, 0x4d, 0x2e, 0x36, 0x88, 0xf9, 0x12, 0x2c, 0x40, 0x39, 0x6e, 0x23, 0x41, 0x3d, 0xb8, 0xe3,
	0xf4, 0x82, 0xc1, 0x12, 0x41, 0x50, 0x05, 0x42, 0xf6, 0x5c, 0xfc, 0x30, 0xab, 0xa0, 0x6e, 0x95,
	0x60, 0x53, 0x60, 0xd6, 0xe0, 0x33, 0x12, 0x43, 0xd2, 0xe3, 0x02, 0x94, 0x09, 0x4e, 0x2d, 0x09,
	0xa9, 0x2c, 0x48, 0x0d, 0xe2, 0x83, 0x2a, 0x77, 0x81, 0xa8, 0x16, 0xb2, 0xe5, 0x12, 0x00, 0x86,
	0x43, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0xdc, 0x04, 0x76, 0xb0, 0xad, 0x42, 0x98, 0x26, 0x04, 0xf1,
	0xc3, 0xd4, 0xc2, 0xb4, 0x0b, 0x70, 0x31, 0x97, 0x16, 0xe5, 0x48, 0x70, 0x80, 0xfd, 0x00, 0x62,
	0x7a, 0xb1, 0x70, 0x30, 0x0b, 0xb0, 0x00, 0x49, 0x56, 0x01, 0x36, 0x27, 0xbe, 0x28, 0x1e, 0x88,
	0x19, 0x99, 0xe0, 0x50, 0x4b, 0x62, 0x03, 0x87, 0x97, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x2e,
	0x95, 0x45, 0x91, 0x8b, 0x01, 0x00, 0x00,
}
