// Code generated by protoc-gen-gogo.
// source: zvelo/msg/query_result.proto
// DO NOT EDIT!

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryResult struct {
	RequestId       string        `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	TrackingId      string        `protobuf:"bytes,2,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	Status          *Status       `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	RequestDataset  []DataSetType `protobuf:"varint,6,rep,packed,name=request_dataset,json=requestDataset,enum=zvelo.msg.DataSetType" json:"request_dataset,omitempty"`
	ResponseDataset *DataSet      `protobuf:"bytes,7,opt,name=response_dataset,json=responseDataset" json:"response_dataset,omitempty"`
	Url             string        `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptorQueryResult, []int{0} }

func (m *QueryResult) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *QueryResult) GetTrackingId() string {
	if m != nil {
		return m.TrackingId
	}
	return ""
}

func (m *QueryResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QueryResult) GetRequestDataset() []DataSetType {
	if m != nil {
		return m.RequestDataset
	}
	return nil
}

func (m *QueryResult) GetResponseDataset() *DataSet {
	if m != nil {
		return m.ResponseDataset
	}
	return nil
}

func (m *QueryResult) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryResult)(nil), "zvelo.msg.QueryResult")
}
func (this *QueryResult) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryResult)
	if !ok {
		that2, ok := that.(QueryResult)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryResult")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryResult but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryResult but is not nil && this == nil")
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	if this.TrackingId != that1.TrackingId {
		return fmt.Errorf("TrackingId this(%v) Not Equal that(%v)", this.TrackingId, that1.TrackingId)
	}
	if !this.Status.Equal(that1.Status) {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if len(this.RequestDataset) != len(that1.RequestDataset) {
		return fmt.Errorf("RequestDataset this(%v) Not Equal that(%v)", len(this.RequestDataset), len(that1.RequestDataset))
	}
	for i := range this.RequestDataset {
		if this.RequestDataset[i] != that1.RequestDataset[i] {
			return fmt.Errorf("RequestDataset this[%v](%v) Not Equal that[%v](%v)", i, this.RequestDataset[i], i, that1.RequestDataset[i])
		}
	}
	if !this.ResponseDataset.Equal(that1.ResponseDataset) {
		return fmt.Errorf("ResponseDataset this(%v) Not Equal that(%v)", this.ResponseDataset, that1.ResponseDataset)
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	return nil
}
func (this *QueryResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryResult)
	if !ok {
		that2, ok := that.(QueryResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.TrackingId != that1.TrackingId {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if len(this.RequestDataset) != len(that1.RequestDataset) {
		return false
	}
	for i := range this.RequestDataset {
		if this.RequestDataset[i] != that1.RequestDataset[i] {
			return false
		}
	}
	if !this.ResponseDataset.Equal(that1.ResponseDataset) {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *QueryResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&msg.QueryResult{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "TrackingId: "+fmt.Sprintf("%#v", this.TrackingId)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "RequestDataset: "+fmt.Sprintf("%#v", this.RequestDataset)+",\n")
	if this.ResponseDataset != nil {
		s = append(s, "ResponseDataset: "+fmt.Sprintf("%#v", this.ResponseDataset)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQueryResult(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueryResult(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	if len(m.TrackingId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQueryResult(dAtA, i, uint64(len(m.TrackingId)))
		i += copy(dAtA[i:], m.TrackingId)
	}
	if m.Status != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintQueryResult(dAtA, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.RequestDataset) > 0 {
		dAtA3 := make([]byte, len(m.RequestDataset)*10)
		var j2 int
		for _, num := range m.RequestDataset {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintQueryResult(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.ResponseDataset != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintQueryResult(dAtA, i, uint64(m.ResponseDataset.Size()))
		n4, err := m.ResponseDataset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintQueryResult(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func encodeFixed64QueryResult(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32QueryResult(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintQueryResult(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QueryResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQueryResult(uint64(l))
	}
	l = len(m.TrackingId)
	if l > 0 {
		n += 1 + l + sovQueryResult(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovQueryResult(uint64(l))
	}
	if len(m.RequestDataset) > 0 {
		l = 0
		for _, e := range m.RequestDataset {
			l += sovQueryResult(uint64(e))
		}
		n += 1 + sovQueryResult(uint64(l)) + l
	}
	if m.ResponseDataset != nil {
		l = m.ResponseDataset.Size()
		n += 1 + l + sovQueryResult(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovQueryResult(uint64(l))
	}
	return n
}

func sovQueryResult(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQueryResult(x uint64) (n int) {
	return sovQueryResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueryResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResult{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`TrackingId:` + fmt.Sprintf("%v", this.TrackingId) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`RequestDataset:` + fmt.Sprintf("%v", this.RequestDataset) + `,`,
		`ResponseDataset:` + strings.Replace(fmt.Sprintf("%v", this.ResponseDataset), "DataSet", "DataSet", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQueryResult(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryResult
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v DataSetType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueryResult
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DataSetType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequestDataset = append(m.RequestDataset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueryResult
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQueryResult
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DataSetType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQueryResult
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DataSetType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequestDataset = append(m.RequestDataset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDataset", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseDataset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryResult
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseDataset == nil {
				m.ResponseDataset = &DataSet{}
			}
			if err := m.ResponseDataset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQueryResult
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQueryResult
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQueryResult(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQueryResult = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryResult   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zvelo/msg/query_result.proto", fileDescriptorQueryResult) }

var fileDescriptorQueryResult = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4f, 0xc2, 0x40,
	0x18, 0x86, 0x7b, 0x50, 0x2b, 0x1c, 0x06, 0xea, 0x0d, 0xd8, 0x10, 0xfd, 0x24, 0x4e, 0xb8, 0x94,
	0x04, 0x67, 0x35, 0x31, 0x2c, 0xb0, 0x59, 0x9c, 0x5c, 0xc8, 0x69, 0x2f, 0x84, 0x58, 0x68, 0xb9,
	0xbb, 0x9a, 0xe0, 0xe4, 0x4f, 0x70, 0xf2, 0x37, 0xf8, 0x53, 0x1c, 0x19, 0x1d, 0xe9, 0xb9, 0x38,
	0xf2, 0x13, 0x4c, 0xaf, 0x2d, 0x98, 0xb8, 0x5d, 0xde, 0xf7, 0xf9, 0xde, 0xf7, 0xbb, 0x0f, 0x1f,
	0xbf, 0x3c, 0xb3, 0x20, 0xec, 0xce, 0xc4, 0xa4, 0xbb, 0x88, 0x19, 0x5f, 0x8e, 0x39, 0x13, 0x71,
	0x20, 0xdd, 0x88, 0x87, 0x32, 0x24, 0x55, 0xed, 0xba, 0x33, 0x31, 0x69, 0x1d, 0xed, 0x40, 0x9f,
	0x4a, 0x2a, 0x58, 0xce, 0xb4, 0x9a, 0x3b, 0x43, 0x48, 0x2a, 0x63, 0x91, 0xe9, 0x67, 0xef, 0x25,
	0x5c, 0xbb, 0x4d, 0x23, 0x3d, 0x9d, 0x48, 0x4e, 0x30, 0xe6, 0x6c, 0x11, 0x33, 0x21, 0xc7, 0x53,
	0xdf, 0x41, 0x6d, 0xd4, 0xa9, 0x7a, 0xd5, 0x5c, 0x19, 0xf8, 0xe4, 0x14, 0xd7, 0x24, 0xa7, 0x8f,
	0x4f, 0xd3, 0xf9, 0x24, 0xf5, 0x4b, 0xda, 0xc7, 0x85, 0x34, 0xf0, 0xc9, 0x39, 0xb6, 0xb2, 0x7c,
	0xc7, 0x6c, 0xa3, 0x4e, 0xad, 0x77, 0xe8, 0x6e, 0x97, 0x73, 0x47, 0xda, 0xf0, 0x72, 0x80, 0x5c,
	0xe3, 0x46, 0x51, 0x95, 0xef, 0xea, 0x58, 0xed, 0x72, 0xa7, 0xde, 0x6b, 0xfe, 0x99, 0xe9, 0x53,
	0x49, 0x47, 0x4c, 0xde, 0x2d, 0x23, 0xe6, 0xd5, 0x73, 0xbc, 0x9f, 0xd1, 0xe4, 0x12, 0xdb, 0x9c,
	0x89, 0x28, 0x9c, 0x0b, 0xb6, 0x4d, 0xd8, 0xd7, 0xad, 0xe4, 0x7f, 0x82, 0xd7, 0x28, 0xd8, 0x62,
	0xdc, 0xc6, 0xe5, 0x98, 0x07, 0x4e, 0x45, 0xff, 0x21, 0x7d, 0x0e, 0xcd, 0x4a, 0xd9, 0x36, 0x87,
	0x66, 0x65, 0xcf, 0xb6, 0x6e, 0xae, 0x56, 0x09, 0x18, 0x5f, 0x09, 0x18, 0xeb, 0x04, 0xd0, 0x26,
	0x01, 0xf4, 0xaa, 0x00, 0x7d, 0x28, 0x40, 0x9f, 0x0a, 0xd0, 0x4a, 0x01, 0x5a, 0x2b, 0x40, 0x3f,
	0x0a, 0x8c, 0x8d, 0x02, 0xf4, 0xf6, 0x0d, 0xc6, 0xfd, 0x41, 0xd6, 0x39, 0xd5, 0x57, 0x7e, 0xb0,
	0xf4, 0x7d, 0x2f, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x1c, 0xc2, 0xc7, 0xbb, 0x01, 0x00,
	0x00,
}
