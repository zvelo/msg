// Code generated by protoc-gen-go.
// source: zvelo/msg/zvelo_api.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryURLRequests struct {
	Url            []string      `protobuf:"bytes,1,rep,name=url" json:"url,omitempty"`
	Dataset        []DataSetType `protobuf:"varint,2,rep,packed,name=dataset,enum=zvelo.msg.DataSetType" json:"dataset,omitempty"`
	Callback       string        `protobuf:"bytes,3,opt,name=callback" json:"callback,omitempty"`
	Poll           bool          `protobuf:"varint,4,opt,name=poll" json:"poll,omitempty"`
	PartialResults bool          `protobuf:"varint,5,opt,name=partial_results,json=partialResults" json:"partial_results,omitempty"`
	Accept         string        `protobuf:"bytes,6,opt,name=accept" json:"accept,omitempty"`
}

func (m *QueryURLRequests) Reset()                    { *m = QueryURLRequests{} }
func (m *QueryURLRequests) String() string            { return proto.CompactTextString(m) }
func (*QueryURLRequests) ProtoMessage()               {}
func (*QueryURLRequests) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *QueryURLRequests) GetUrl() []string {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *QueryURLRequests) GetDataset() []DataSetType {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (m *QueryURLRequests) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *QueryURLRequests) GetPoll() bool {
	if m != nil {
		return m.Poll
	}
	return false
}

func (m *QueryURLRequests) GetPartialResults() bool {
	if m != nil {
		return m.PartialResults
	}
	return false
}

func (m *QueryURLRequests) GetAccept() string {
	if m != nil {
		return m.Accept
	}
	return ""
}

type QueryContentRequests struct {
	Content        []*QueryContentRequests_URLContent `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
	Dataset        []DataSetType                      `protobuf:"varint,2,rep,packed,name=dataset,enum=zvelo.msg.DataSetType" json:"dataset,omitempty"`
	Callback       string                             `protobuf:"bytes,3,opt,name=callback" json:"callback,omitempty"`
	Poll           bool                               `protobuf:"varint,4,opt,name=poll" json:"poll,omitempty"`
	PartialResults bool                               `protobuf:"varint,5,opt,name=partial_results,json=partialResults" json:"partial_results,omitempty"`
	Accept         string                             `protobuf:"bytes,6,opt,name=accept" json:"accept,omitempty"`
}

func (m *QueryContentRequests) Reset()                    { *m = QueryContentRequests{} }
func (m *QueryContentRequests) String() string            { return proto.CompactTextString(m) }
func (*QueryContentRequests) ProtoMessage()               {}
func (*QueryContentRequests) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *QueryContentRequests) GetContent() []*QueryContentRequests_URLContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *QueryContentRequests) GetDataset() []DataSetType {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (m *QueryContentRequests) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *QueryContentRequests) GetPoll() bool {
	if m != nil {
		return m.Poll
	}
	return false
}

func (m *QueryContentRequests) GetPartialResults() bool {
	if m != nil {
		return m.PartialResults
	}
	return false
}

func (m *QueryContentRequests) GetAccept() string {
	if m != nil {
		return m.Accept
	}
	return ""
}

type QueryContentRequests_URLContent struct {
	// Use a unique id if content has no url, to link response to request.
	Id      string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Url     string            `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Header  map[string]string `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Content string            `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
}

func (m *QueryContentRequests_URLContent) Reset()         { *m = QueryContentRequests_URLContent{} }
func (m *QueryContentRequests_URLContent) String() string { return proto.CompactTextString(m) }
func (*QueryContentRequests_URLContent) ProtoMessage()    {}
func (*QueryContentRequests_URLContent) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{1, 0}
}

func (m *QueryContentRequests_URLContent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryContentRequests_URLContent) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *QueryContentRequests_URLContent) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *QueryContentRequests_URLContent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type QueryReply struct {
	Status    *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	RequestId string  `protobuf:"bytes,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

func (m *QueryReply) Reset()                    { *m = QueryReply{} }
func (m *QueryReply) String() string            { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()               {}
func (*QueryReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *QueryReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QueryReply) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// If a request contained more then one URL, or piece of content, we will reply
// with this reply. Each sub-query should be reflected in the replies field,
// and with their own status. The position in the array will correspond to the
// index in the original array of URL or Content provided in the QueryURLRequests
// or QueryContentRequests message
type QueryReplies struct {
	Replies []*QueryReply `protobuf:"bytes,1,rep,name=replies" json:"replies,omitempty"`
	Status  *Status       `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *QueryReplies) Reset()                    { *m = QueryReplies{} }
func (m *QueryReplies) String() string            { return proto.CompactTextString(m) }
func (*QueryReplies) ProtoMessage()               {}
func (*QueryReplies) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *QueryReplies) GetReplies() []*QueryReply {
	if m != nil {
		return m.Replies
	}
	return nil
}

func (m *QueryReplies) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryURLRequests)(nil), "zvelo.msg.QueryURLRequests")
	proto.RegisterType((*QueryContentRequests)(nil), "zvelo.msg.QueryContentRequests")
	proto.RegisterType((*QueryContentRequests_URLContent)(nil), "zvelo.msg.QueryContentRequests.URLContent")
	proto.RegisterType((*QueryReply)(nil), "zvelo.msg.QueryReply")
	proto.RegisterType((*QueryReplies)(nil), "zvelo.msg.QueryReplies")
}

func init() { proto.RegisterFile("zvelo/msg/zvelo_api.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x93, 0xdf, 0x8b, 0xd3, 0x40,
	0x10, 0xc7, 0x49, 0xd2, 0x4b, 0xaf, 0xd3, 0xa3, 0x9e, 0xcb, 0x59, 0xd7, 0x80, 0x50, 0xfa, 0x62,
	0xf5, 0x21, 0x95, 0x0a, 0xa2, 0x3e, 0xea, 0x09, 0x0a, 0x87, 0xe0, 0x9e, 0xe7, 0x83, 0x2f, 0x65,
	0x2f, 0x19, 0xce, 0x78, 0x7b, 0x4d, 0xdc, 0xdd, 0x14, 0xe2, 0x3f, 0xe8, 0x1f, 0x20, 0xfe, 0x3f,
	0xd2, 0xd9, 0x4d, 0x13, 0x44, 0xd0, 0x57, 0xdf, 0x66, 0xbe, 0xf3, 0x63, 0x3f, 0x33, 0xbb, 0x0b,
	0xf7, 0xbe, 0x6d, 0x51, 0x95, 0xcb, 0x1b, 0x73, 0xb5, 0x24, 0x6b, 0x2d, 0xab, 0x22, 0xad, 0x74,
	0x69, 0x4b, 0x36, 0x22, 0x21, 0xbd, 0x31, 0x57, 0xc9, 0xdd, 0x2e, 0x2b, 0x97, 0x56, 0x1a, 0xb4,
	0x2e, 0x27, 0x99, 0x76, 0x01, 0x63, 0xa5, 0xad, 0x8d, 0xd3, 0xe7, 0xdf, 0x03, 0x38, 0x7e, 0x5f,
	0xa3, 0x6e, 0x2e, 0xc4, 0x99, 0xc0, 0xaf, 0x35, 0x1a, 0x6b, 0xd8, 0x31, 0x44, 0xb5, 0x56, 0x3c,
	0x98, 0x45, 0x8b, 0x91, 0xd8, 0x99, 0xec, 0x31, 0x0c, 0x7d, 0x3f, 0x1e, 0xce, 0xa2, 0xc5, 0x64,
	0x35, 0x4d, 0xf7, 0x87, 0xa6, 0xa7, 0xd2, 0xca, 0x73, 0xb4, 0x1f, 0x9a, 0x0a, 0x45, 0x9b, 0xc6,
	0x12, 0x38, 0xcc, 0xa4, 0x52, 0x97, 0x32, 0xbb, 0xe6, 0xd1, 0x2c, 0x58, 0x8c, 0xc4, 0xde, 0x67,
	0x0c, 0x06, 0x55, 0xa9, 0x14, 0x1f, 0xcc, 0x82, 0xc5, 0xa1, 0x20, 0x9b, 0x3d, 0x80, 0x5b, 0x95,
	0xd4, 0xb6, 0x90, 0x6a, 0xad, 0xd1, 0xd4, 0xca, 0x1a, 0x7e, 0x40, 0xe1, 0x89, 0x97, 0x85, 0x53,
	0xd9, 0x14, 0x62, 0x99, 0x65, 0x58, 0x59, 0x1e, 0x53, 0x5b, 0xef, 0xcd, 0x7f, 0x46, 0x70, 0x42,
	0x93, 0xbc, 0x2a, 0x37, 0x16, 0x37, 0x76, 0x3f, 0xcd, 0x29, 0x0c, 0x33, 0x27, 0xd1, 0x44, 0xe3,
	0xd5, 0xa3, 0x1e, 0xfb, 0x9f, 0x2a, 0xd2, 0x0b, 0x71, 0xd6, 0x4a, 0x6d, 0xe9, 0x7f, 0xb0, 0x81,
	0xe4, 0x47, 0x00, 0xd0, 0xa1, 0xb3, 0x09, 0x84, 0x45, 0xce, 0x03, 0x4a, 0x09, 0x8b, 0xbc, 0xbd,
	0xd5, 0x90, 0x04, 0xba, 0xd5, 0x77, 0x10, 0x7f, 0x46, 0x99, 0xa3, 0xe6, 0x11, 0x2d, 0xe6, 0xe9,
	0xbf, 0x2f, 0x26, 0x7d, 0x43, 0x85, 0xaf, 0x37, 0x56, 0x37, 0xc2, 0x77, 0x61, 0xbc, 0xdb, 0xf4,
	0x80, 0x4e, 0x69, 0xdd, 0xe4, 0x39, 0x8c, 0x7b, 0x05, 0x3b, 0x94, 0x6b, 0x6c, 0x3c, 0xdb, 0xce,
	0x64, 0x27, 0x70, 0xb0, 0x95, 0xaa, 0x46, 0x8f, 0xe7, 0x9c, 0x17, 0xe1, 0xb3, 0x60, 0xfe, 0x11,
	0x80, 0x58, 0x04, 0x56, 0xaa, 0x61, 0x0f, 0x21, 0x76, 0xef, 0x97, 0x8a, 0xc7, 0xab, 0xdb, 0x3d,
	0xe4, 0x73, 0x0a, 0x08, 0x9f, 0xc0, 0xee, 0x03, 0x68, 0x07, 0xbe, 0x2e, 0x72, 0xdf, 0x77, 0xe4,
	0x95, 0xb7, 0xf9, 0xfc, 0x0b, 0x1c, 0xed, 0xfb, 0x16, 0x68, 0xd8, 0x12, 0x86, 0xda, 0x99, 0xfe,
	0x99, 0xdc, 0xf9, 0x7d, 0x1b, 0x44, 0x20, 0xda, 0xac, 0x1e, 0x4a, 0xf8, 0x17, 0x94, 0x97, 0x93,
	0x4f, 0x47, 0x2e, 0x56, 0xd0, 0x17, 0xbc, 0x8c, 0xe9, 0xf3, 0x3d, 0xf9, 0x15, 0x00, 0x00, 0xff,
	0xff, 0xea, 0x91, 0xe0, 0x15, 0xd5, 0x03, 0x00, 0x00,
}
