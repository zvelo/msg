// Code generated by protoc-gen-gogo.
// source: zvelo/msg/zvelo_api.proto
// DO NOT EDIT!

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryURLRequests struct {
	Url            []string      `protobuf:"bytes,1,rep,name=url" json:"url,omitempty"`
	Dataset        []DataSetType `protobuf:"varint,2,rep,packed,name=dataset,enum=zvelo.msg.DataSetType" json:"dataset,omitempty"`
	Callback       string        `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`
	Poll           bool          `protobuf:"varint,4,opt,name=poll,proto3" json:"poll,omitempty"`
	PartialResults bool          `protobuf:"varint,5,opt,name=partial_results,json=partialResults,proto3" json:"partial_results,omitempty"`
	Accept         string        `protobuf:"bytes,6,opt,name=accept,proto3" json:"accept,omitempty"`
}

func (m *QueryURLRequests) Reset()                    { *m = QueryURLRequests{} }
func (*QueryURLRequests) ProtoMessage()               {}
func (*QueryURLRequests) Descriptor() ([]byte, []int) { return fileDescriptorZveloApi, []int{0} }

func (m *QueryURLRequests) GetUrl() []string {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *QueryURLRequests) GetDataset() []DataSetType {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (m *QueryURLRequests) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *QueryURLRequests) GetPoll() bool {
	if m != nil {
		return m.Poll
	}
	return false
}

func (m *QueryURLRequests) GetPartialResults() bool {
	if m != nil {
		return m.PartialResults
	}
	return false
}

func (m *QueryURLRequests) GetAccept() string {
	if m != nil {
		return m.Accept
	}
	return ""
}

type QueryContentRequests struct {
	Content        []*QueryContentRequests_URLContent `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
	Dataset        []DataSetType                      `protobuf:"varint,2,rep,packed,name=dataset,enum=zvelo.msg.DataSetType" json:"dataset,omitempty"`
	Callback       string                             `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`
	Poll           bool                               `protobuf:"varint,4,opt,name=poll,proto3" json:"poll,omitempty"`
	PartialResults bool                               `protobuf:"varint,5,opt,name=partial_results,json=partialResults,proto3" json:"partial_results,omitempty"`
	Accept         string                             `protobuf:"bytes,6,opt,name=accept,proto3" json:"accept,omitempty"`
}

func (m *QueryContentRequests) Reset()                    { *m = QueryContentRequests{} }
func (*QueryContentRequests) ProtoMessage()               {}
func (*QueryContentRequests) Descriptor() ([]byte, []int) { return fileDescriptorZveloApi, []int{1} }

func (m *QueryContentRequests) GetContent() []*QueryContentRequests_URLContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *QueryContentRequests) GetDataset() []DataSetType {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (m *QueryContentRequests) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *QueryContentRequests) GetPoll() bool {
	if m != nil {
		return m.Poll
	}
	return false
}

func (m *QueryContentRequests) GetPartialResults() bool {
	if m != nil {
		return m.PartialResults
	}
	return false
}

func (m *QueryContentRequests) GetAccept() string {
	if m != nil {
		return m.Accept
	}
	return ""
}

type QueryContentRequests_URLContent struct {
	// Use a unique id if content has no url, to link response to request.
	Id      string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url     string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Header  map[string]string `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Content string            `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *QueryContentRequests_URLContent) Reset()      { *m = QueryContentRequests_URLContent{} }
func (*QueryContentRequests_URLContent) ProtoMessage() {}
func (*QueryContentRequests_URLContent) Descriptor() ([]byte, []int) {
	return fileDescriptorZveloApi, []int{1, 0}
}

func (m *QueryContentRequests_URLContent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryContentRequests_URLContent) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *QueryContentRequests_URLContent) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *QueryContentRequests_URLContent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type QueryReply struct {
	Status    *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	RequestId string  `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryReply) Reset()                    { *m = QueryReply{} }
func (*QueryReply) ProtoMessage()               {}
func (*QueryReply) Descriptor() ([]byte, []int) { return fileDescriptorZveloApi, []int{2} }

func (m *QueryReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QueryReply) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// If a request contained more then one URL, or piece of content, we will reply
// with this reply. Each sub-query should be reflected in the replies field,
// and with their own status. The position in the array will correspond to the
// index in the original array of URL or Content provided in the QueryURLRequests
// or QueryContentRequests message
type QueryReplies struct {
	Replies []*QueryReply `protobuf:"bytes,1,rep,name=replies" json:"replies,omitempty"`
}

func (m *QueryReplies) Reset()                    { *m = QueryReplies{} }
func (*QueryReplies) ProtoMessage()               {}
func (*QueryReplies) Descriptor() ([]byte, []int) { return fileDescriptorZveloApi, []int{3} }

func (m *QueryReplies) GetReplies() []*QueryReply {
	if m != nil {
		return m.Replies
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryURLRequests)(nil), "zvelo.msg.QueryURLRequests")
	proto.RegisterType((*QueryContentRequests)(nil), "zvelo.msg.QueryContentRequests")
	proto.RegisterType((*QueryContentRequests_URLContent)(nil), "zvelo.msg.QueryContentRequests.URLContent")
	proto.RegisterType((*QueryReply)(nil), "zvelo.msg.QueryReply")
	proto.RegisterType((*QueryReplies)(nil), "zvelo.msg.QueryReplies")
}
func (this *QueryURLRequests) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryURLRequests)
	if !ok {
		that2, ok := that.(QueryURLRequests)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryURLRequests")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryURLRequests but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryURLRequests but is not nil && this == nil")
	}
	if len(this.Url) != len(that1.Url) {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", len(this.Url), len(that1.Url))
	}
	for i := range this.Url {
		if this.Url[i] != that1.Url[i] {
			return fmt.Errorf("Url this[%v](%v) Not Equal that[%v](%v)", i, this.Url[i], i, that1.Url[i])
		}
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return fmt.Errorf("Dataset this(%v) Not Equal that(%v)", len(this.Dataset), len(that1.Dataset))
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return fmt.Errorf("Dataset this[%v](%v) Not Equal that[%v](%v)", i, this.Dataset[i], i, that1.Dataset[i])
		}
	}
	if this.Callback != that1.Callback {
		return fmt.Errorf("Callback this(%v) Not Equal that(%v)", this.Callback, that1.Callback)
	}
	if this.Poll != that1.Poll {
		return fmt.Errorf("Poll this(%v) Not Equal that(%v)", this.Poll, that1.Poll)
	}
	if this.PartialResults != that1.PartialResults {
		return fmt.Errorf("PartialResults this(%v) Not Equal that(%v)", this.PartialResults, that1.PartialResults)
	}
	if this.Accept != that1.Accept {
		return fmt.Errorf("Accept this(%v) Not Equal that(%v)", this.Accept, that1.Accept)
	}
	return nil
}
func (this *QueryURLRequests) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryURLRequests)
	if !ok {
		that2, ok := that.(QueryURLRequests)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Url) != len(that1.Url) {
		return false
	}
	for i := range this.Url {
		if this.Url[i] != that1.Url[i] {
			return false
		}
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return false
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return false
		}
	}
	if this.Callback != that1.Callback {
		return false
	}
	if this.Poll != that1.Poll {
		return false
	}
	if this.PartialResults != that1.PartialResults {
		return false
	}
	if this.Accept != that1.Accept {
		return false
	}
	return true
}
func (this *QueryContentRequests) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryContentRequests)
	if !ok {
		that2, ok := that.(QueryContentRequests)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryContentRequests")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryContentRequests but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryContentRequests but is not nil && this == nil")
	}
	if len(this.Content) != len(that1.Content) {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", len(this.Content), len(that1.Content))
	}
	for i := range this.Content {
		if !this.Content[i].Equal(that1.Content[i]) {
			return fmt.Errorf("Content this[%v](%v) Not Equal that[%v](%v)", i, this.Content[i], i, that1.Content[i])
		}
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return fmt.Errorf("Dataset this(%v) Not Equal that(%v)", len(this.Dataset), len(that1.Dataset))
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return fmt.Errorf("Dataset this[%v](%v) Not Equal that[%v](%v)", i, this.Dataset[i], i, that1.Dataset[i])
		}
	}
	if this.Callback != that1.Callback {
		return fmt.Errorf("Callback this(%v) Not Equal that(%v)", this.Callback, that1.Callback)
	}
	if this.Poll != that1.Poll {
		return fmt.Errorf("Poll this(%v) Not Equal that(%v)", this.Poll, that1.Poll)
	}
	if this.PartialResults != that1.PartialResults {
		return fmt.Errorf("PartialResults this(%v) Not Equal that(%v)", this.PartialResults, that1.PartialResults)
	}
	if this.Accept != that1.Accept {
		return fmt.Errorf("Accept this(%v) Not Equal that(%v)", this.Accept, that1.Accept)
	}
	return nil
}
func (this *QueryContentRequests) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryContentRequests)
	if !ok {
		that2, ok := that.(QueryContentRequests)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Content) != len(that1.Content) {
		return false
	}
	for i := range this.Content {
		if !this.Content[i].Equal(that1.Content[i]) {
			return false
		}
	}
	if len(this.Dataset) != len(that1.Dataset) {
		return false
	}
	for i := range this.Dataset {
		if this.Dataset[i] != that1.Dataset[i] {
			return false
		}
	}
	if this.Callback != that1.Callback {
		return false
	}
	if this.Poll != that1.Poll {
		return false
	}
	if this.PartialResults != that1.PartialResults {
		return false
	}
	if this.Accept != that1.Accept {
		return false
	}
	return true
}
func (this *QueryContentRequests_URLContent) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryContentRequests_URLContent)
	if !ok {
		that2, ok := that.(QueryContentRequests_URLContent)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryContentRequests_URLContent")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryContentRequests_URLContent but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryContentRequests_URLContent but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if len(this.Header) != len(that1.Header) {
		return fmt.Errorf("Header this(%v) Not Equal that(%v)", len(this.Header), len(that1.Header))
	}
	for i := range this.Header {
		if this.Header[i] != that1.Header[i] {
			return fmt.Errorf("Header this[%v](%v) Not Equal that[%v](%v)", i, this.Header[i], i, that1.Header[i])
		}
	}
	if this.Content != that1.Content {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	return nil
}
func (this *QueryContentRequests_URLContent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryContentRequests_URLContent)
	if !ok {
		that2, ok := that.(QueryContentRequests_URLContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if len(this.Header) != len(that1.Header) {
		return false
	}
	for i := range this.Header {
		if this.Header[i] != that1.Header[i] {
			return false
		}
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *QueryReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryReply)
	if !ok {
		that2, ok := that.(QueryReply)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryReply")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryReply but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryReply but is not nil && this == nil")
	}
	if !this.Status.Equal(that1.Status) {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.RequestId != that1.RequestId {
		return fmt.Errorf("RequestId this(%v) Not Equal that(%v)", this.RequestId, that1.RequestId)
	}
	return nil
}
func (this *QueryReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryReply)
	if !ok {
		that2, ok := that.(QueryReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *QueryReplies) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryReplies)
	if !ok {
		that2, ok := that.(QueryReplies)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryReplies")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryReplies but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryReplies but is not nil && this == nil")
	}
	if len(this.Replies) != len(that1.Replies) {
		return fmt.Errorf("Replies this(%v) Not Equal that(%v)", len(this.Replies), len(that1.Replies))
	}
	for i := range this.Replies {
		if !this.Replies[i].Equal(that1.Replies[i]) {
			return fmt.Errorf("Replies this[%v](%v) Not Equal that[%v](%v)", i, this.Replies[i], i, that1.Replies[i])
		}
	}
	return nil
}
func (this *QueryReplies) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryReplies)
	if !ok {
		that2, ok := that.(QueryReplies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Replies) != len(that1.Replies) {
		return false
	}
	for i := range this.Replies {
		if !this.Replies[i].Equal(that1.Replies[i]) {
			return false
		}
	}
	return true
}
func (this *QueryURLRequests) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&msg.QueryURLRequests{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Dataset: "+fmt.Sprintf("%#v", this.Dataset)+",\n")
	s = append(s, "Callback: "+fmt.Sprintf("%#v", this.Callback)+",\n")
	s = append(s, "Poll: "+fmt.Sprintf("%#v", this.Poll)+",\n")
	s = append(s, "PartialResults: "+fmt.Sprintf("%#v", this.PartialResults)+",\n")
	s = append(s, "Accept: "+fmt.Sprintf("%#v", this.Accept)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryContentRequests) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&msg.QueryContentRequests{")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "Dataset: "+fmt.Sprintf("%#v", this.Dataset)+",\n")
	s = append(s, "Callback: "+fmt.Sprintf("%#v", this.Callback)+",\n")
	s = append(s, "Poll: "+fmt.Sprintf("%#v", this.Poll)+",\n")
	s = append(s, "PartialResults: "+fmt.Sprintf("%#v", this.PartialResults)+",\n")
	s = append(s, "Accept: "+fmt.Sprintf("%#v", this.Accept)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryContentRequests_URLContent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msg.QueryContentRequests_URLContent{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%#v: %#v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	if this.Header != nil {
		s = append(s, "Header: "+mapStringForHeader+",\n")
	}
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msg.QueryReply{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryReplies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msg.QueryReplies{")
	if this.Replies != nil {
		s = append(s, "Replies: "+fmt.Sprintf("%#v", this.Replies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringZveloApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueryURLRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryURLRequests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		for _, s := range m.Url {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Dataset) > 0 {
		dAtA2 := make([]byte, len(m.Dataset)*10)
		var j1 int
		for _, num := range m.Dataset {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Callback) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(len(m.Callback)))
		i += copy(dAtA[i:], m.Callback)
	}
	if m.Poll {
		dAtA[i] = 0x20
		i++
		if m.Poll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PartialResults {
		dAtA[i] = 0x28
		i++
		if m.PartialResults {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Accept) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(len(m.Accept)))
		i += copy(dAtA[i:], m.Accept)
	}
	return i, nil
}

func (m *QueryContentRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContentRequests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		for _, msg := range m.Content {
			dAtA[i] = 0xa
			i++
			i = encodeVarintZveloApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Dataset) > 0 {
		dAtA4 := make([]byte, len(m.Dataset)*10)
		var j3 int
		for _, num := range m.Dataset {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Callback) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(len(m.Callback)))
		i += copy(dAtA[i:], m.Callback)
	}
	if m.Poll {
		dAtA[i] = 0x20
		i++
		if m.Poll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PartialResults {
		dAtA[i] = 0x28
		i++
		if m.PartialResults {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Accept) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(len(m.Accept)))
		i += copy(dAtA[i:], m.Accept)
	}
	return i, nil
}

func (m *QueryContentRequests_URLContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContentRequests_URLContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Header) > 0 {
		for k, _ := range m.Header {
			dAtA[i] = 0x1a
			i++
			v := m.Header[k]
			mapSize := 1 + len(k) + sovZveloApi(uint64(len(k))) + 1 + len(v) + sovZveloApi(uint64(len(v)))
			i = encodeVarintZveloApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintZveloApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintZveloApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *QueryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(m.Status.Size()))
		n5, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.RequestId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZveloApi(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	return i, nil
}

func (m *QueryReplies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReplies) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Replies) > 0 {
		for _, msg := range m.Replies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintZveloApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64ZveloApi(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ZveloApi(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintZveloApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QueryURLRequests) Size() (n int) {
	var l int
	_ = l
	if len(m.Url) > 0 {
		for _, s := range m.Url {
			l = len(s)
			n += 1 + l + sovZveloApi(uint64(l))
		}
	}
	if len(m.Dataset) > 0 {
		l = 0
		for _, e := range m.Dataset {
			l += sovZveloApi(uint64(e))
		}
		n += 1 + sovZveloApi(uint64(l)) + l
	}
	l = len(m.Callback)
	if l > 0 {
		n += 1 + l + sovZveloApi(uint64(l))
	}
	if m.Poll {
		n += 2
	}
	if m.PartialResults {
		n += 2
	}
	l = len(m.Accept)
	if l > 0 {
		n += 1 + l + sovZveloApi(uint64(l))
	}
	return n
}

func (m *QueryContentRequests) Size() (n int) {
	var l int
	_ = l
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovZveloApi(uint64(l))
		}
	}
	if len(m.Dataset) > 0 {
		l = 0
		for _, e := range m.Dataset {
			l += sovZveloApi(uint64(e))
		}
		n += 1 + sovZveloApi(uint64(l)) + l
	}
	l = len(m.Callback)
	if l > 0 {
		n += 1 + l + sovZveloApi(uint64(l))
	}
	if m.Poll {
		n += 2
	}
	if m.PartialResults {
		n += 2
	}
	l = len(m.Accept)
	if l > 0 {
		n += 1 + l + sovZveloApi(uint64(l))
	}
	return n
}

func (m *QueryContentRequests_URLContent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovZveloApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovZveloApi(uint64(l))
	}
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovZveloApi(uint64(len(k))) + 1 + len(v) + sovZveloApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovZveloApi(uint64(mapEntrySize))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovZveloApi(uint64(l))
	}
	return n
}

func (m *QueryReply) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovZveloApi(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovZveloApi(uint64(l))
	}
	return n
}

func (m *QueryReplies) Size() (n int) {
	var l int
	_ = l
	if len(m.Replies) > 0 {
		for _, e := range m.Replies {
			l = e.Size()
			n += 1 + l + sovZveloApi(uint64(l))
		}
	}
	return n
}

func sovZveloApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZveloApi(x uint64) (n int) {
	return sovZveloApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueryURLRequests) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryURLRequests{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Dataset:` + fmt.Sprintf("%v", this.Dataset) + `,`,
		`Callback:` + fmt.Sprintf("%v", this.Callback) + `,`,
		`Poll:` + fmt.Sprintf("%v", this.Poll) + `,`,
		`PartialResults:` + fmt.Sprintf("%v", this.PartialResults) + `,`,
		`Accept:` + fmt.Sprintf("%v", this.Accept) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryContentRequests) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryContentRequests{`,
		`Content:` + strings.Replace(fmt.Sprintf("%v", this.Content), "QueryContentRequests_URLContent", "QueryContentRequests_URLContent", 1) + `,`,
		`Dataset:` + fmt.Sprintf("%v", this.Dataset) + `,`,
		`Callback:` + fmt.Sprintf("%v", this.Callback) + `,`,
		`Poll:` + fmt.Sprintf("%v", this.Poll) + `,`,
		`PartialResults:` + fmt.Sprintf("%v", this.PartialResults) + `,`,
		`Accept:` + fmt.Sprintf("%v", this.Accept) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryContentRequests_URLContent) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%v: %v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	s := strings.Join([]string{`&QueryContentRequests_URLContent{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Header:` + mapStringForHeader + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryReply{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryReplies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryReplies{`,
		`Replies:` + strings.Replace(fmt.Sprintf("%v", this.Replies), "QueryReply", "QueryReply", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringZveloApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueryURLRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZveloApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryURLRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryURLRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = append(m.Url, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v DataSetType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZveloApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DataSetType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dataset = append(m.Dataset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZveloApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZveloApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DataSetType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZveloApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DataSetType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dataset = append(m.Dataset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Poll = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialResults", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartialResults = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accept", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accept = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZveloApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZveloApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContentRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZveloApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContentRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContentRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &QueryContentRequests_URLContent{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v DataSetType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZveloApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DataSetType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dataset = append(m.Dataset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZveloApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZveloApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DataSetType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZveloApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DataSetType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dataset = append(m.Dataset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Poll = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialResults", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartialResults = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accept", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accept = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZveloApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZveloApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContentRequests_URLContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZveloApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthZveloApi
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Header == nil {
				m.Header = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZveloApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZveloApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthZveloApi
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Header[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Header[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZveloApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZveloApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZveloApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZveloApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZveloApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReplies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZveloApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReplies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReplies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZveloApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replies = append(m.Replies, &QueryReply{})
			if err := m.Replies[len(m.Replies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZveloApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZveloApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZveloApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZveloApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZveloApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZveloApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZveloApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZveloApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZveloApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZveloApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zvelo/msg/zvelo_api.proto", fileDescriptorZveloApi) }

var fileDescriptorZveloApi = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x53, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xce, 0x64, 0xd3, 0x4d, 0xf3, 0x52, 0x62, 0x1d, 0x6a, 0x5c, 0x17, 0x1c, 0x42, 0x2e, 0x46,
	0x0f, 0x1b, 0x89, 0x20, 0xea, 0x41, 0x41, 0x2b, 0x28, 0x14, 0xc1, 0xa9, 0xf5, 0xe0, 0x25, 0x4c,
	0x77, 0x87, 0xba, 0x74, 0x9a, 0x5d, 0x77, 0x66, 0x0b, 0xeb, 0xc9, 0x9f, 0xe0, 0xcf, 0xf0, 0x9f,
	0xe8, 0xb1, 0x20, 0x82, 0xc7, 0x66, 0xbd, 0x78, 0xec, 0x4f, 0x90, 0xbc, 0x9d, 0x4d, 0x82, 0x78,
	0xf0, 0xda, 0xdb, 0x7b, 0xdf, 0xfb, 0xde, 0x37, 0xdf, 0x7b, 0x33, 0x03, 0x37, 0x3e, 0x9e, 0x4a,
	0x95, 0x8c, 0x4f, 0xf4, 0xd1, 0x18, 0xa3, 0xa9, 0x48, 0xe3, 0x20, 0xcd, 0x12, 0x93, 0xd0, 0x0e,
	0x02, 0xc1, 0x89, 0x3e, 0xf2, 0xaf, 0xaf, 0x58, 0x91, 0x30, 0x42, 0x4b, 0x53, 0x71, 0xfc, 0xfe,
	0xaa, 0xa0, 0x8d, 0x30, 0xb9, 0xae, 0xf0, 0xe1, 0x57, 0x02, 0xdb, 0xaf, 0x73, 0x99, 0x15, 0x07,
	0x7c, 0x8f, 0xcb, 0x0f, 0xb9, 0xd4, 0x46, 0xd3, 0x6d, 0x70, 0xf2, 0x4c, 0x79, 0x64, 0xe0, 0x8c,
	0x3a, 0x7c, 0x11, 0xd2, 0xbb, 0xd0, 0xb6, 0x7a, 0x5e, 0x73, 0xe0, 0x8c, 0x7a, 0x93, 0x7e, 0xb0,
	0x3c, 0x34, 0xd8, 0x15, 0x46, 0xec, 0x4b, 0xf3, 0xa6, 0x48, 0x25, 0xaf, 0x69, 0xd4, 0x87, 0xcd,
	0x50, 0x28, 0x75, 0x28, 0xc2, 0x63, 0xcf, 0x19, 0x90, 0x51, 0x87, 0x2f, 0x73, 0x4a, 0xa1, 0x95,
	0x26, 0x4a, 0x79, 0xad, 0x01, 0x19, 0x6d, 0x72, 0x8c, 0xe9, 0x2d, 0xb8, 0x92, 0x8a, 0xcc, 0xc4,
	0x42, 0x4d, 0x33, 0xa9, 0x73, 0x65, 0xb4, 0xb7, 0x81, 0xe5, 0x9e, 0x85, 0x79, 0x85, 0xd2, 0x3e,
	0xb8, 0x22, 0x0c, 0x65, 0x6a, 0x3c, 0x17, 0x65, 0x6d, 0x36, 0xfc, 0xe1, 0xc0, 0x0e, 0x4e, 0xf2,
	0x2c, 0x99, 0x19, 0x39, 0x33, 0xcb, 0x69, 0x76, 0xa1, 0x1d, 0x56, 0x10, 0x4e, 0xd4, 0x9d, 0xdc,
	0x59, 0xf3, 0xfe, 0xaf, 0x8e, 0xe0, 0x80, 0xef, 0xd5, 0x50, 0xdd, 0x7a, 0x09, 0x36, 0xe0, 0x7f,
	0x27, 0x00, 0x2b, 0xeb, 0xb4, 0x07, 0xcd, 0x38, 0xf2, 0x08, 0x52, 0x9a, 0x71, 0x54, 0xdf, 0x6a,
	0x13, 0x01, 0xbc, 0xd5, 0x57, 0xe0, 0xbe, 0x97, 0x22, 0x92, 0x99, 0xe7, 0xe0, 0x62, 0xee, 0xff,
	0xff, 0x62, 0x82, 0x17, 0xd8, 0xf8, 0x7c, 0x66, 0xb2, 0x82, 0x5b, 0x15, 0xea, 0xad, 0x36, 0xdd,
	0xc2, 0x53, 0xea, 0xd4, 0x7f, 0x08, 0xdd, 0xb5, 0x86, 0x85, 0x95, 0x63, 0x59, 0x58, 0x6f, 0x8b,
	0x90, 0xee, 0xc0, 0xc6, 0xa9, 0x50, 0xb9, 0xb4, 0xf6, 0xaa, 0xe4, 0x51, 0xf3, 0x01, 0x19, 0xbe,
	0x05, 0x40, 0x2f, 0x5c, 0xa6, 0xaa, 0xa0, 0xb7, 0xc1, 0xad, 0xde, 0x2f, 0x36, 0x77, 0x27, 0x57,
	0xd7, 0x2c, 0xef, 0x63, 0x81, 0x5b, 0x02, 0xbd, 0x09, 0x90, 0x55, 0xc6, 0xa7, 0x71, 0x64, 0x75,
	0x3b, 0x16, 0x79, 0x19, 0x0d, 0x9f, 0xc0, 0xd6, 0x52, 0x37, 0x96, 0x9a, 0x8e, 0xa1, 0x9d, 0x55,
	0xa1, 0x7d, 0x26, 0xd7, 0xfe, 0xde, 0x06, 0x3a, 0xe0, 0x35, 0xeb, 0xe9, 0xe3, 0xb3, 0x39, 0x6b,
	0xfc, 0x9c, 0xb3, 0xc6, 0xf9, 0x9c, 0x91, 0x8b, 0x39, 0x23, 0x9f, 0x4a, 0x46, 0xbe, 0x94, 0x8c,
	0x7c, 0x2b, 0x19, 0x39, 0x2b, 0x19, 0x39, 0x2f, 0x19, 0xf9, 0x5d, 0xb2, 0xc6, 0x45, 0xc9, 0xc8,
	0xe7, 0x5f, 0xac, 0xf1, 0x6e, 0xab, 0x12, 0x8c, 0xf1, 0x1f, 0x1e, 0xba, 0xf8, 0x03, 0xef, 0xfd,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x85, 0x2f, 0x39, 0x9d, 0xda, 0x03, 0x00, 0x00,
}
