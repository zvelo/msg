// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zvelo/msg/api.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	// Create new URL query
	QueryURLV1(ctx context.Context, in *QueryURLRequests, opts ...grpc.CallOption) (*QueryReplies, error)
	// Results of active or unexpired query
	QueryURLResultV1(ctx context.Context, in *QueryPollRequest, opts ...grpc.CallOption) (*QueryResult, error)
	// Create new content query
	QueryContentV1(ctx context.Context, in *QueryContentRequests, opts ...grpc.CallOption) (*QueryReplies, error)
	// Results of active or unexpired query
	QueryContentResultV1(ctx context.Context, in *QueryPollRequest, opts ...grpc.CallOption) (*QueryResult, error)
	// Get an override by its base URL
	OverrideGetV1(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*Override, error)
	// Add or update an override
	OverrideAddV1(ctx context.Context, in *Override, opts ...grpc.CallOption) (*Override, error)
	// Delete an existing override
	OverrideDeleteV1(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*Override, error)
	// Find the override that would match a given URL
	OverrideMatchingV1(ctx context.Context, in *Override, opts ...grpc.CallOption) (*Override, error)
	// List overrides
	OverrideListV1(ctx context.Context, in *OverrideListRequest, opts ...grpc.CallOption) (*Overrides, error)
	// List expired overrides of the given type
	OverrideListExpiredV1(ctx context.Context, in *OverrideListExpiredRequest, opts ...grpc.CallOption) (*Overrides, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) QueryURLV1(ctx context.Context, in *QueryURLRequests, opts ...grpc.CallOption) (*QueryReplies, error) {
	out := new(QueryReplies)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/QueryURLV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) QueryURLResultV1(ctx context.Context, in *QueryPollRequest, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/QueryURLResultV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) QueryContentV1(ctx context.Context, in *QueryContentRequests, opts ...grpc.CallOption) (*QueryReplies, error) {
	out := new(QueryReplies)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/QueryContentV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) QueryContentResultV1(ctx context.Context, in *QueryPollRequest, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/QueryContentResultV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) OverrideGetV1(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*Override, error) {
	out := new(Override)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/OverrideGetV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) OverrideAddV1(ctx context.Context, in *Override, opts ...grpc.CallOption) (*Override, error) {
	out := new(Override)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/OverrideAddV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) OverrideDeleteV1(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*Override, error) {
	out := new(Override)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/OverrideDeleteV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) OverrideMatchingV1(ctx context.Context, in *Override, opts ...grpc.CallOption) (*Override, error) {
	out := new(Override)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/OverrideMatchingV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) OverrideListV1(ctx context.Context, in *OverrideListRequest, opts ...grpc.CallOption) (*Overrides, error) {
	out := new(Overrides)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/OverrideListV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) OverrideListExpiredV1(ctx context.Context, in *OverrideListExpiredRequest, opts ...grpc.CallOption) (*Overrides, error) {
	out := new(Overrides)
	err := grpc.Invoke(ctx, "/zvelo.msg.API/OverrideListExpiredV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Create new URL query
	QueryURLV1(context.Context, *QueryURLRequests) (*QueryReplies, error)
	// Results of active or unexpired query
	QueryURLResultV1(context.Context, *QueryPollRequest) (*QueryResult, error)
	// Create new content query
	QueryContentV1(context.Context, *QueryContentRequests) (*QueryReplies, error)
	// Results of active or unexpired query
	QueryContentResultV1(context.Context, *QueryPollRequest) (*QueryResult, error)
	// Get an override by its base URL
	OverrideGetV1(context.Context, *OverrideRequest) (*Override, error)
	// Add or update an override
	OverrideAddV1(context.Context, *Override) (*Override, error)
	// Delete an existing override
	OverrideDeleteV1(context.Context, *OverrideRequest) (*Override, error)
	// Find the override that would match a given URL
	OverrideMatchingV1(context.Context, *Override) (*Override, error)
	// List overrides
	OverrideListV1(context.Context, *OverrideListRequest) (*Overrides, error)
	// List expired overrides of the given type
	OverrideListExpiredV1(context.Context, *OverrideListExpiredRequest) (*Overrides, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_QueryURLV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryURLRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).QueryURLV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/QueryURLV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).QueryURLV1(ctx, req.(*QueryURLRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_QueryURLResultV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).QueryURLResultV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/QueryURLResultV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).QueryURLResultV1(ctx, req.(*QueryPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_QueryContentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContentRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).QueryContentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/QueryContentV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).QueryContentV1(ctx, req.(*QueryContentRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_QueryContentResultV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).QueryContentResultV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/QueryContentResultV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).QueryContentResultV1(ctx, req.(*QueryPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_OverrideGetV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).OverrideGetV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/OverrideGetV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).OverrideGetV1(ctx, req.(*OverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_OverrideAddV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Override)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).OverrideAddV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/OverrideAddV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).OverrideAddV1(ctx, req.(*Override))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_OverrideDeleteV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).OverrideDeleteV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/OverrideDeleteV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).OverrideDeleteV1(ctx, req.(*OverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_OverrideMatchingV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Override)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).OverrideMatchingV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/OverrideMatchingV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).OverrideMatchingV1(ctx, req.(*Override))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_OverrideListV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).OverrideListV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/OverrideListV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).OverrideListV1(ctx, req.(*OverrideListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_OverrideListExpiredV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideListExpiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).OverrideListExpiredV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zvelo.msg.API/OverrideListExpiredV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).OverrideListExpiredV1(ctx, req.(*OverrideListExpiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zvelo.msg.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryURLV1",
			Handler:    _API_QueryURLV1_Handler,
		},
		{
			MethodName: "QueryURLResultV1",
			Handler:    _API_QueryURLResultV1_Handler,
		},
		{
			MethodName: "QueryContentV1",
			Handler:    _API_QueryContentV1_Handler,
		},
		{
			MethodName: "QueryContentResultV1",
			Handler:    _API_QueryContentResultV1_Handler,
		},
		{
			MethodName: "OverrideGetV1",
			Handler:    _API_OverrideGetV1_Handler,
		},
		{
			MethodName: "OverrideAddV1",
			Handler:    _API_OverrideAddV1_Handler,
		},
		{
			MethodName: "OverrideDeleteV1",
			Handler:    _API_OverrideDeleteV1_Handler,
		},
		{
			MethodName: "OverrideMatchingV1",
			Handler:    _API_OverrideMatchingV1_Handler,
		},
		{
			MethodName: "OverrideListV1",
			Handler:    _API_OverrideListV1_Handler,
		},
		{
			MethodName: "OverrideListExpiredV1",
			Handler:    _API_OverrideListExpiredV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zvelo/msg/api.proto",
}

func init() { proto.RegisterFile("zvelo/msg/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0x14, 0x44, 0x07, 0xfb, 0x83, 0xd9, 0x8d, 0x2d, 0x69, 0x1d, 0x25, 0x28, 0x48,
	0x0f, 0x1b, 0x56, 0x6f, 0x1e, 0x84, 0xfa, 0x03, 0x11, 0x2a, 0xd6, 0x15, 0x7b, 0x10, 0x6a, 0x5d,
	0x9b, 0x47, 0x1c, 0x99, 0xcd, 0x6c, 0x33, 0x93, 0x45, 0x2d, 0x05, 0xf1, 0xe2, 0x55, 0xf0, 0x9f,
	0xf0, 0x4f, 0xf1, 0x58, 0xf0, 0xe2, 0xb1, 0x89, 0x1e, 0x3c, 0xf6, 0x4f, 0x90, 0x99, 0x64, 0xcc,
	0x66, 0x1d, 0x15, 0xd9, 0xeb, 0x7c, 0xdf, 0xfb, 0x7c, 0xde, 0x9b, 0x84, 0xc1, 0xed, 0x37, 0x63,
	0xe0, 0x22, 0x1c, 0xca, 0x38, 0x1c, 0x8c, 0x58, 0x77, 0x94, 0x0a, 0x25, 0xc8, 0x19, 0x73, 0xd8,
	0x1d, 0xca, 0xd8, 0xf7, 0xea, 0x7c, 0x2f, 0x83, 0xf4, 0x75, 0x59, 0xe1, 0xaf, 0xd6, 0xc7, 0x59,
	0xca, 0x77, 0xc4, 0x18, 0xd2, 0x94, 0x45, 0x60, 0xd3, 0x58, 0x88, 0x98, 0x83, 0x26, 0x86, 0x83,
	0x24, 0x11, 0x6a, 0xa0, 0x98, 0x48, 0x64, 0x99, 0x5e, 0x7d, 0x7f, 0x1a, 0x9f, 0x5c, 0xdf, 0xbc,
	0x47, 0x9e, 0x62, 0xfc, 0x50, 0x23, 0x1f, 0xf7, 0x37, 0xb6, 0x7a, 0x64, 0xa5, 0xfb, 0x4b, 0xda,
	0xb5, 0xc7, 0x7d, 0xd8, 0xcb, 0x40, 0x2a, 0xe9, 0x2f, 0x4d, 0x87, 0x7d, 0x18, 0x71, 0x06, 0x32,
	0xf0, 0xdf, 0x7d, 0xf9, 0xfe, 0xf1, 0x44, 0x27, 0x58, 0x08, 0xc7, 0x3d, 0x33, 0x20, 0x03, 0xa9,
	0x27, 0xba, 0x8e, 0xd6, 0xc8, 0x10, 0x2f, 0xd6, 0x20, 0x99, 0x71, 0xe5, 0xb2, 0x6c, 0x0a, 0xce,
	0x2b, 0x8d, 0x7f, 0xee, 0x77, 0x8b, 0x6e, 0x0b, 0x2e, 0x19, 0x09, 0x25, 0xab, 0x53, 0x92, 0x70,
	0x3f, 0x2d, 0x3b, 0x77, 0x58, 0x74, 0x40, 0x5e, 0xe2, 0x79, 0xd3, 0x74, 0x4b, 0x24, 0x0a, 0x12,
	0x2d, 0xbb, 0x30, 0xcd, 0xab, 0xa2, 0x7f, 0xaf, 0x45, 0x8d, 0x71, 0x39, 0x68, 0x4f, 0x1a, 0x77,
	0xcb, 0x6e, 0xbd, 0x5a, 0x86, 0x3b, 0x4d, 0xe0, 0x2c, 0xeb, 0x5d, 0x31, 0xb2, 0x80, 0x5c, 0x74,
	0xc8, 0x9a, 0x2b, 0x6e, 0xe3, 0xb9, 0x07, 0xd5, 0x97, 0xbe, 0x0b, 0xda, 0xe7, 0x4f, 0x20, 0x6d,
	0x62, 0x75, 0x6d, 0x47, 0x16, 0xac, 0x18, 0x97, 0x47, 0xcc, 0x62, 0xf6, 0xaf, 0x91, 0xe1, 0x7e,
	0x96, 0xf2, 0x03, 0xf2, 0xa8, 0xc6, 0xaf, 0x47, 0xd1, 0x56, 0x8f, 0xb8, 0x10, 0x6e, 0xee, 0xb2,
	0xe1, 0x92, 0x60, 0xae, 0xc1, 0xd5, 0x57, 0xf5, 0x0c, 0x2f, 0xda, 0xaa, 0xdb, 0xc0, 0x41, 0xc1,
	0x0c, 0x63, 0xaf, 0x39, 0xc7, 0x8e, 0x30, 0xb1, 0x85, 0xf7, 0x07, 0x6a, 0xf7, 0x05, 0x4b, 0xe2,
	0xff, 0x9a, 0xbd, 0xf1, 0x7b, 0xd5, 0xf0, 0x61, 0xc5, 0xaa, 0x2c, 0xdb, 0x78, 0xde, 0x76, 0x6c,
	0x30, 0xa9, 0x2f, 0x9f, 0x3a, 0x60, 0x3a, 0xb2, 0x9b, 0x74, 0x1c, 0xb9, 0x0c, 0x3c, 0x63, 0x5b,
	0x20, 0xcd, 0x9b, 0x22, 0x12, 0x7b, 0x93, 0x8c, 0x3b, 0xaf, 0x46, 0x2c, 0x05, 0xfd, 0x0d, 0x2e,
	0xff, 0xc1, 0x52, 0x55, 0xfc, 0x5d, 0x76, 0xde, 0xc8, 0x96, 0x88, 0xd7, 0x5c, 0x0d, 0xca, 0xde,
	0x9b, 0x37, 0x0e, 0x73, 0xda, 0xfa, 0x9a, 0xd3, 0xd6, 0x51, 0x4e, 0xd1, 0x71, 0x4e, 0xd1, 0xdb,
	0x82, 0xa2, 0x4f, 0x05, 0x45, 0x9f, 0x0b, 0x8a, 0x0e, 0x0b, 0x8a, 0x8e, 0x0a, 0x8a, 0x7e, 0x14,
	0xb4, 0x75, 0x5c, 0x50, 0xf4, 0xe1, 0x1b, 0x6d, 0x3d, 0x39, 0x5b, 0x5a, 0x98, 0x79, 0x7a, 0x9e,
	0x9f, 0x32, 0x0f, 0xca, 0xb5, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xf8, 0x85, 0xf9, 0xc5,
	0x04, 0x00, 0x00,
}
