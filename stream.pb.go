// Code generated by protoc-gen-go.
// source: zvelo.io/msg/stream.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Stream_Status int32

const (
	Stream_CREATED  Stream_Status = 0
	Stream_RUNNING  Stream_Status = 1
	Stream_PAUSED   Stream_Status = 2
	Stream_RETRYING Stream_Status = 3
	Stream_ENDED    Stream_Status = 4
	Stream_FAILED   Stream_Status = 5
)

var Stream_Status_name = map[int32]string{
	0: "CREATED",
	1: "RUNNING",
	2: "PAUSED",
	3: "RETRYING",
	4: "ENDED",
	5: "FAILED",
}
var Stream_Status_value = map[string]int32{
	"CREATED":  0,
	"RUNNING":  1,
	"PAUSED":   2,
	"RETRYING": 3,
	"ENDED":    4,
	"FAILED":   5,
}

func (x Stream_Status) String() string {
	return proto.EnumName(Stream_Status_name, int32(x))
}
func (Stream_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{1, 0} }

type StreamRequest struct {
	CustomerTrackingId string        `protobuf:"bytes,1,opt,name=customer_tracking_id,json=customerTrackingId" json:"customer_tracking_id,omitempty"`
	Endpoint           string        `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	Accept             string        `protobuf:"bytes,3,opt,name=accept" json:"accept,omitempty"`
	Dataset            []DataSetType `protobuf:"varint,4,rep,name=dataset,enum=msg.DataSetType" json:"dataset,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type Stream struct {
	Uuid          string                     `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	StreamStatus  Stream_Status              `protobuf:"varint,2,opt,name=stream_status,json=streamStatus,enum=msg.Stream_Status" json:"stream_status,omitempty"`
	StreamRequest *StreamRequest             `protobuf:"bytes,3,opt,name=stream_request,json=streamRequest" json:"stream_request,omitempty"`
	Org           string                     `protobuf:"bytes,5,opt,name=org" json:"org,omitempty"`
	User          string                     `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	CreationDate  *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
}

func (m *Stream) Reset()                    { *m = Stream{} }
func (m *Stream) String() string            { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()               {}
func (*Stream) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *Stream) GetStreamRequest() *StreamRequest {
	if m != nil {
		return m.StreamRequest
	}
	return nil
}

func (m *Stream) GetCreationDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

type StreamReply struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Stream *Stream `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
}

func (m *StreamReply) Reset()                    { *m = StreamReply{} }
func (m *StreamReply) String() string            { return proto.CompactTextString(m) }
func (*StreamReply) ProtoMessage()               {}
func (*StreamReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *StreamReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *StreamReply) GetStream() *Stream {
	if m != nil {
		return m.Stream
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamRequest)(nil), "msg.StreamRequest")
	proto.RegisterType((*Stream)(nil), "msg.Stream")
	proto.RegisterType((*StreamReply)(nil), "msg.StreamReply")
	proto.RegisterEnum("msg.Stream_Status", Stream_Status_name, Stream_Status_value)
}

var fileDescriptor5 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x52, 0x5d, 0x8f, 0x93, 0x40,
	0x14, 0x95, 0xd2, 0xd2, 0xdd, 0xdb, 0x8f, 0x34, 0x37, 0xc6, 0x20, 0x2f, 0x6e, 0xea, 0xcb, 0xc6,
	0x07, 0x6a, 0xd6, 0x07, 0xe3, 0x93, 0xa9, 0x16, 0x4d, 0x13, 0x43, 0xcc, 0xc0, 0xc6, 0xe8, 0x0b,
	0x61, 0x61, 0x24, 0xc4, 0xc2, 0x20, 0x0c, 0x26, 0xeb, 0xbf, 0xf1, 0xff, 0xf8, 0xa3, 0x1c, 0xee,
	0x0c, 0xab, 0xeb, 0x53, 0xef, 0xe5, 0x9c, 0x33, 0x73, 0xce, 0x99, 0xc2, 0xe3, 0x9f, 0x3f, 0xf8,
	0x49, 0xf8, 0xa5, 0xd8, 0x55, 0x5d, 0xb1, 0xeb, 0x64, 0xcb, 0xd3, 0xca, 0x6f, 0x5a, 0x21, 0x05,
	0xda, 0xea, 0x8b, 0xe7, 0xdd, 0xc3, 0xf3, 0x54, 0xa6, 0x1d, 0x97, 0x9a, 0xe0, 0xfd, 0xaf, 0x4d,
	0x65, 0xdf, 0x19, 0xe8, 0x49, 0x21, 0x44, 0x71, 0xe2, 0x3b, 0xda, 0x6e, 0xfa, 0xaf, 0x3b, 0x59,
	0x56, 0x5c, 0x31, 0xaa, 0x46, 0x13, 0xb6, 0xbf, 0x2c, 0x58, 0x45, 0x74, 0x1b, 0xe3, 0xdf, 0x7b,
	0x05, 0xe1, 0x73, 0x78, 0x98, 0xf5, 0x9d, 0x14, 0x15, 0x6f, 0x13, 0xd9, 0xa6, 0xd9, 0xb7, 0xb2,
	0x2e, 0x92, 0x32, 0x77, 0xad, 0x0b, 0xeb, 0xf2, 0x9c, 0xe1, 0x88, 0xc5, 0x06, 0x3a, 0xe6, 0xe8,
	0xc1, 0x19, 0xaf, 0xf3, 0x46, 0x94, 0xb5, 0x74, 0x27, 0xc4, 0xba, 0xdb, 0xf1, 0x11, 0x38, 0x69,
	0x96, 0xf1, 0x46, 0xba, 0x36, 0x21, 0x66, 0xc3, 0x67, 0x30, 0x37, 0x21, 0xdc, 0xe9, 0x85, 0x7d,
	0xb9, 0xbe, 0xda, 0xf8, 0xca, 0xbc, 0x7f, 0x50, 0xdf, 0x22, 0x2e, 0xe3, 0xdb, 0x86, 0xb3, 0x91,
	0xb0, 0xfd, 0x3d, 0x01, 0x47, 0x7b, 0x44, 0x84, 0x69, 0xdf, 0xdf, 0x99, 0xa1, 0x19, 0x5f, 0xc2,
	0x4a, 0xf7, 0x95, 0xe8, 0xe8, 0xe4, 0x61, 0x7d, 0x85, 0x74, 0xa0, 0xd6, 0xa9, 0x9f, 0x01, 0x61,
	0x4b, 0x4d, 0xd4, 0x1b, 0xbe, 0x82, 0xb5, 0x11, 0xb6, 0x3a, 0x3b, 0x79, 0x5c, 0xdc, 0x53, 0x9a,
	0x56, 0x98, 0xb9, 0x62, 0x2c, 0x69, 0x03, 0xb6, 0x68, 0x0b, 0x77, 0x46, 0x36, 0x86, 0x91, 0x9c,
	0x75, 0xbc, 0x75, 0x1d, 0xe3, 0x4c, 0xcd, 0xf8, 0x1a, 0x56, 0x99, 0x52, 0xc9, 0x52, 0xd4, 0x89,
	0x0a, 0xc3, 0xdd, 0x39, 0x9d, 0xef, 0xf9, 0xfa, 0x55, 0xfc, 0xf1, 0x55, 0xfc, 0x78, 0x7c, 0x15,
	0xb6, 0x1c, 0x05, 0xaa, 0x09, 0xbe, 0x8d, 0x86, 0xe0, 0xe4, 0x75, 0x01, 0xf3, 0xb7, 0x2c, 0xd8,
	0xc7, 0xc1, 0x61, 0xf3, 0x60, 0x58, 0xd8, 0x75, 0x18, 0x1e, 0xc3, 0xf7, 0x1b, 0x0b, 0x01, 0x9c,
	0x8f, 0xfb, 0xeb, 0x48, 0x01, 0x13, 0x5c, 0xc2, 0x19, 0x0b, 0x62, 0xf6, 0x79, 0x40, 0x6c, 0x3c,
	0x87, 0x59, 0x10, 0x1e, 0x14, 0x30, 0x1d, 0x48, 0xef, 0xf6, 0xc7, 0x0f, 0x6a, 0x9e, 0x6d, 0x3f,
	0xc1, 0x62, 0xcc, 0xd6, 0x9c, 0x6e, 0xf1, 0x29, 0x38, 0xa6, 0x37, 0x8b, 0xdc, 0x2d, 0x4c, 0x7a,
	0x2a, 0xcc, 0x40, 0x9a, 0x34, 0x68, 0xa8, 0xdc, 0xbf, 0x24, 0x3a, 0xc6, 0x40, 0x6f, 0xd6, 0x5f,
	0x96, 0xff, 0xfe, 0x13, 0x6f, 0x1c, 0xca, 0xf7, 0xe2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfa,
	0x6c, 0x5f, 0x7e, 0xdc, 0x02, 0x00, 0x00,
}
