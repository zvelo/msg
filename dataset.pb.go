// Code generated by protoc-gen-go.
// source: zvelo.io/msg/dataset.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DataSetType int32

const (
	DataSetType_CATEGORIZATION DataSetType = 0
	DataSetType_ADFRAUD        DataSetType = 1
	// 2 and 3 are reserved
	DataSetType_MALICIOUS DataSetType = 4
	DataSetType_ECHO      DataSetType = 5
)

var DataSetType_name = map[int32]string{
	0: "CATEGORIZATION",
	1: "ADFRAUD",
	4: "MALICIOUS",
	5: "ECHO",
}
var DataSetType_value = map[string]int32{
	"CATEGORIZATION": 0,
	"ADFRAUD":        1,
	"MALICIOUS":      4,
	"ECHO":           5,
}

func (x DataSetType) String() string {
	return proto.EnumName(DataSetType_name, int32(x))
}
func (DataSetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type DataSet struct {
	Categorization *DataSet_Categorization `protobuf:"bytes,1,opt,name=categorization" json:"categorization,omitempty"`
	Adfraud        *DataSet_AdFraud        `protobuf:"bytes,2,opt,name=adfraud" json:"adfraud,omitempty"`
	// 3 and 4 are reserved
	Malicious *DataSet_Malicious `protobuf:"bytes,5,opt,name=malicious" json:"malicious,omitempty"`
	Echo      *DataSet_Echo      `protobuf:"bytes,6,opt,name=echo" json:"echo,omitempty"`
}

func (m *DataSet) Reset()                    { *m = DataSet{} }
func (m *DataSet) String() string            { return proto.CompactTextString(m) }
func (*DataSet) ProtoMessage()               {}
func (*DataSet) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DataSet) GetCategorization() *DataSet_Categorization {
	if m != nil {
		return m.Categorization
	}
	return nil
}

func (m *DataSet) GetAdfraud() *DataSet_AdFraud {
	if m != nil {
		return m.Adfraud
	}
	return nil
}

func (m *DataSet) GetMalicious() *DataSet_Malicious {
	if m != nil {
		return m.Malicious
	}
	return nil
}

func (m *DataSet) GetEcho() *DataSet_Echo {
	if m != nil {
		return m.Echo
	}
	return nil
}

type DataSet_Categorization struct {
	Category []Category `protobuf:"varint,1,rep,name=category,enum=msg.Category" json:"category,omitempty"`
}

func (m *DataSet_Categorization) Reset()                    { *m = DataSet_Categorization{} }
func (m *DataSet_Categorization) String() string            { return proto.CompactTextString(m) }
func (*DataSet_Categorization) ProtoMessage()               {}
func (*DataSet_Categorization) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type DataSet_AdFraud struct {
	Fraud     bool   `protobuf:"varint,1,opt,name=fraud" json:"fraud,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *DataSet_AdFraud) Reset()                    { *m = DataSet_AdFraud{} }
func (m *DataSet_AdFraud) String() string            { return proto.CompactTextString(m) }
func (*DataSet_AdFraud) ProtoMessage()               {}
func (*DataSet_AdFraud) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 1} }

type DataSet_Malicious struct {
	Category  Category `protobuf:"varint,1,opt,name=category,enum=msg.Category" json:"category,omitempty"`
	Signature string   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Verdict   bool     `protobuf:"varint,3,opt,name=verdict" json:"verdict,omitempty"`
}

func (m *DataSet_Malicious) Reset()                    { *m = DataSet_Malicious{} }
func (m *DataSet_Malicious) String() string            { return proto.CompactTextString(m) }
func (*DataSet_Malicious) ProtoMessage()               {}
func (*DataSet_Malicious) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 2} }

type DataSet_Echo struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *DataSet_Echo) Reset()                    { *m = DataSet_Echo{} }
func (m *DataSet_Echo) String() string            { return proto.CompactTextString(m) }
func (*DataSet_Echo) ProtoMessage()               {}
func (*DataSet_Echo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 3} }

func init() {
	proto.RegisterType((*DataSet)(nil), "msg.DataSet")
	proto.RegisterType((*DataSet_Categorization)(nil), "msg.DataSet.Categorization")
	proto.RegisterType((*DataSet_AdFraud)(nil), "msg.DataSet.AdFraud")
	proto.RegisterType((*DataSet_Malicious)(nil), "msg.DataSet.Malicious")
	proto.RegisterType((*DataSet_Echo)(nil), "msg.DataSet.Echo")
	proto.RegisterEnum("msg.DataSetType", DataSetType_name, DataSetType_value)
}

var fileDescriptor2 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6f, 0xa2, 0x40,
	0x18, 0xc6, 0x97, 0x45, 0x45, 0x5e, 0x57, 0xc2, 0x4e, 0xcc, 0x86, 0xe0, 0x1e, 0x36, 0x9b, 0x6c,
	0xe2, 0xee, 0x01, 0x13, 0xb7, 0xb7, 0xa6, 0x07, 0x8a, 0x7f, 0x4a, 0xd2, 0x96, 0x64, 0xd4, 0x8b,
	0xb7, 0x29, 0x4c, 0x2d, 0x89, 0x3a, 0x06, 0x06, 0x13, 0xfd, 0xb6, 0xfd, 0x26, 0x1d, 0x46, 0xd0,
	0xe2, 0xc1, 0x1b, 0xcc, 0xf3, 0xfc, 0xe6, 0x7d, 0x9e, 0x37, 0x03, 0xf6, 0x61, 0x47, 0x57, 0xcc,
	0x89, 0x59, 0x7f, 0x9d, 0x2e, 0xfb, 0x11, 0xe1, 0x24, 0xa5, 0xdc, 0xd9, 0x26, 0x8c, 0x33, 0xa4,
	0x8a, 0x23, 0xbb, 0x5b, 0x31, 0x84, 0x84, 0xd3, 0x25, 0x4b, 0xf6, 0x47, 0xc7, 0xef, 0x77, 0x15,
	0xb4, 0xa1, 0x60, 0xa6, 0x94, 0x23, 0x0f, 0x8c, 0x42, 0x8d, 0x0f, 0x84, 0xc7, 0x6c, 0x63, 0x29,
	0xbf, 0x94, 0x5e, 0x6b, 0xd0, 0x75, 0x04, 0xe8, 0x14, 0x2e, 0xc7, 0xab, 0x58, 0xf0, 0x05, 0x82,
	0x1c, 0xd0, 0x48, 0xf4, 0x9a, 0x90, 0x2c, 0xb2, 0xbe, 0x4a, 0xba, 0x53, 0xa1, 0xdd, 0x68, 0x9c,
	0x6b, 0xb8, 0x34, 0xa1, 0x1b, 0xd0, 0xd7, 0x64, 0x15, 0x87, 0x31, 0xcb, 0x52, 0xab, 0x2e, 0x89,
	0x1f, 0x15, 0xe2, 0xa9, 0x54, 0xf1, 0xd9, 0x88, 0xfe, 0x40, 0x8d, 0x86, 0x6f, 0xcc, 0x6a, 0x48,
	0xe0, 0x7b, 0x05, 0x18, 0x09, 0x01, 0x4b, 0xd9, 0xbe, 0x05, 0xa3, 0x1a, 0x17, 0xfd, 0x85, 0x66,
	0xb9, 0x01, 0xd1, 0x4e, 0xed, 0x19, 0x83, 0xb6, 0x84, 0x0b, 0xdb, 0x1e, 0x9f, 0x64, 0xfb, 0x0e,
	0xb4, 0x22, 0x2d, 0xea, 0x40, 0xfd, 0x58, 0x29, 0x5f, 0x48, 0x13, 0x1f, 0x7f, 0xd0, 0x4f, 0xd0,
	0xd3, 0x78, 0xb9, 0x21, 0x3c, 0x4b, 0xa8, 0x2c, 0xab, 0xe3, 0xf3, 0x81, 0xbd, 0x01, 0xfd, 0x14,
	0xfd, 0x62, 0xac, 0x72, 0x65, 0xec, 0xf5, 0x5b, 0x91, 0x05, 0xda, 0x8e, 0x26, 0x51, 0x1c, 0x72,
	0x4b, 0x95, 0x59, 0xca, 0x5f, 0xdb, 0x82, 0x5a, 0xde, 0x1c, 0x99, 0xa0, 0x66, 0xc9, 0x4a, 0x4e,
	0xd1, 0x71, 0xfe, 0xf9, 0x6f, 0x02, 0xad, 0x62, 0x37, 0xb3, 0xfd, 0x96, 0x22, 0x24, 0x96, 0xe2,
	0xce, 0x46, 0x93, 0x00, 0xfb, 0x0b, 0x77, 0xe6, 0x07, 0xcf, 0xe6, 0x17, 0xd4, 0x12, 0x5d, 0x87,
	0x63, 0xec, 0xce, 0x87, 0xa6, 0x82, 0xda, 0x22, 0xb9, 0xfb, 0xe8, 0x7b, 0x7e, 0x30, 0x9f, 0x9a,
	0x35, 0xd4, 0x14, 0x17, 0x7b, 0x0f, 0x81, 0x59, 0xbf, 0x37, 0x16, 0xdf, 0x3e, 0xbf, 0xa5, 0x97,
	0x86, 0x7c, 0x43, 0xff, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x22, 0xbe, 0xc7, 0x2f, 0x83, 0x02,
	0x00, 0x00,
}
