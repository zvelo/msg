syntax = "proto3";

package zvelo.msg;

option go_package = "zvelo.io/msg";

import "zvelo/msg/dataset.proto";
import "google/rpc/status.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message QueryPollRequest {
  string request_id = 1;
};

// QueryStatus
message QueryStatus {
  option (gogoproto.equal) = false;
  option (gogoproto.verbose_equal) = false;
  option (gogoproto.marshaler) = false;
  option (gogoproto.unmarshaler) = false;
  option (gogoproto.sizer) = false;

  bool complete = 1;
  google.rpc.Status error = 2;

  // the http status code received from the server when fetching a url
  int32 fetch_code = 3;

  // fetching the url resulted in a redirect to this location
  string location = 4;
}

// QueryResult
message QueryResult {
  option (gogoproto.equal) = false;
  option (gogoproto.verbose_equal) = false;
  option (gogoproto.marshaler) = false;
  option (gogoproto.unmarshaler) = false;
  option (gogoproto.sizer) = false;

  // Request ID for tracking requests
  string request_id = 1;

  reserved 2;
  reserved 3;
  reserved 4;
  reserved 5;
  reserved 6;

  DataSet response_dataset        = 7;
  string url                      = 8;
  repeated uint32 request_dataset = 9;

  QueryStatus query_status = 10;
};

// QueryURLRequests
message QueryURLRequests {
  // The URLs to categorize. Required.
  repeated string url = 1;

  reserved 2;

  // The callback url will receive the final result and may receive partial
  // results if partial_results is true. It is an error to specify
  // callback when poll is true.
  string callback = 3;

  // The client will poll for a result. It is an error to specify poll as
  // true when callback has a value.
  bool poll = 4;

  // True if partial results should be sent to the callback endpoint in
  // addition to the final result. Only makes sense in the context of a
  // callback query.
  bool partial_results = 5;

  reserved 6;

  // The datasets to query for each URL
  repeated uint32 dataset = 7;
}

// QueryContentRequests
message QueryContentRequests {
  // URLContent
  message URLContent {
    // customer supplied identifier to link to response
    string id = 1;

    // url the content came from, not required
    string url= 2;

    // headers
    //
    // header key/value pairs
    map<string, string> header = 3;

    // the actual content to process. required
    string content = 4;
  }

  // The content to categorize
  repeated URLContent content = 1;

  reserved 2;

  // A callback URL. Will receive the final result and may receive partial
  // results if `partial-results` is true. It is an error to specify
  // callback when poll is true.
  string callback = 3;

  // Whether the client will poll for a result. It is an error to specify
  // poll as true when callback has a value.
  bool poll = 4;

  // True if partial results should be sent to the callback endpoint in
  // addition to the final result. Only makes sense in the context of a
  // callback query.
  bool partial_results = 5;

  reserved 6;

  // The datasets to query
  repeated uint32 dataset = 7;
}

// QueryReply
message QueryReply {
  option (gogoproto.equal) = false;
  option (gogoproto.verbose_equal) = false;
  option (gogoproto.marshaler) = false;
  option (gogoproto.unmarshaler) = false;
  option (gogoproto.sizer) = false;

  reserved 1;

  // will identify the request after submission
  string request_id = 2;

  QueryStatus query_status = 3;
}

// If a request contained more then one URL, or piece of content, we will reply
// with this reply. Each sub-query should be reflected in the replies field,
// and with their own status. The position in the array will correspond to the
// index in the original array of URL or Content provided in the QueryURLRequests
// or QueryContentRequests message

// QueryReplies
message QueryReplies {
  option (gogoproto.equal) = false;
  option (gogoproto.verbose_equal) = false;
  option (gogoproto.marshaler) = false;
  option (gogoproto.unmarshaler) = false;
  option (gogoproto.sizer) = false;

  repeated QueryReply replies = 1;  // this contains a reply for each sub query
}

// Callback Rules:
// For each individual URL/RequestID we will POST at least one QueryResult message to
// the callback URL.
// A RequestID callback may be sent one time if all DataSets are in cache, up to
// one callback for each dataset as it becomes available.
