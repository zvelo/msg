// Code generated by protoc-gen-go.
// source: zvelo/msg/stream_result.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StreamResult struct {
	Url     string   `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Dataset *DataSet `protobuf:"bytes,2,opt,name=dataset" json:"dataset,omitempty"`
}

func (m *StreamResult) Reset()                    { *m = StreamResult{} }
func (m *StreamResult) String() string            { return proto.CompactTextString(m) }
func (*StreamResult) ProtoMessage()               {}
func (*StreamResult) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *StreamResult) GetDataset() *DataSet {
	if m != nil {
		return m.Dataset
	}
	return nil
}

type StreamResults struct {
	Values []*StreamResult `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *StreamResults) Reset()                    { *m = StreamResults{} }
func (m *StreamResults) String() string            { return proto.CompactTextString(m) }
func (*StreamResults) ProtoMessage()               {}
func (*StreamResults) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *StreamResults) GetValues() []*StreamResult {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamResult)(nil), "zvelo.msg.StreamResult")
	proto.RegisterType((*StreamResults)(nil), "zvelo.msg.StreamResults")
}

func init() { proto.RegisterFile("zvelo/msg/stream_result.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xad, 0x2a, 0x4b, 0xcd,
	0xc9, 0xd7, 0xcf, 0x2d, 0x4e, 0xd7, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x8d, 0x2f, 0x4a, 0x2d,
	0x2e, 0xcd, 0x29, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0x4b, 0xeb, 0xe5, 0x16,
	0xa7, 0x4b, 0x89, 0x23, 0x54, 0xa6, 0x24, 0x96, 0x24, 0x16, 0xa7, 0x42, 0xd5, 0x28, 0xf9, 0x71,
	0xf1, 0x04, 0x83, 0xb5, 0x06, 0x81, 0x75, 0x0a, 0x09, 0x70, 0x31, 0x97, 0x16, 0xe5, 0x48, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x42, 0x3a, 0x5c, 0xec, 0x50, 0x2d, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0xdc, 0x46, 0x42, 0x7a, 0x70, 0x73, 0xf5, 0x5c, 0x12, 0x4b, 0x12, 0x83, 0x53, 0x4b,
	0x82, 0x60, 0x4a, 0x94, 0x1c, 0xb8, 0x78, 0x91, 0xcd, 0x2b, 0x16, 0xd2, 0xe7, 0x62, 0x2b, 0x4b,
	0xcc, 0x29, 0x4d, 0x2d, 0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0x12, 0x47, 0xd2, 0x8d, 0xac,
	0x32, 0x08, 0xaa, 0xcc, 0x89, 0x2f, 0x8a, 0x07, 0xa2, 0x22, 0x13, 0xec, 0xde, 0x24, 0x36, 0xb0,
	0x43, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xea, 0x2a, 0xe4, 0x38, 0xed, 0x00, 0x00, 0x00,
}
